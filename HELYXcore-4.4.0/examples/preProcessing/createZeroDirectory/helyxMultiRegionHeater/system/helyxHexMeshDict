/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      autoHexMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/helyxHexMeshDict.cfg"

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    bottomAir.stl
    {
        type triSurfaceMesh;
        name bottomAir;
    }

    topAir.stl
    {
        type triSurfaceMesh;
        name topAir;
    }

    leftSolid.stl
    {
        type triSurfaceMesh;
        name leftSolid;
    }

    rightSolid.stl
    {
        type triSurfaceMesh;
        name rightSolid;
    }

    heater.stl
    {
        type triSurfaceMesh;
        name heater;
    }

    //refinementBox
    //{
    //    type searchableBox;
    //    min (-0.3 -0.4 -0.1);
    //    max ( 3.0  0.4  1.4);
   // }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{
    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file "bottomAir.eMesh";
            level 1;
        }
        {
            file "heater.eMesh";
            level 1;
        }
        {
            file "leftSolid.eMesh";
            level 1;
        }
        {
            file "rightSolid.eMesh";
            level 1;
        }
        {
            file "topAir.eMesh";
            level 1;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        bottomAir
        {
            // Surface-wise min and max refinement level
            level (1 1);

            faceZone bottomAir;
            cellZone bottomAir;
            cellZoneInside inside;
        }

        topAir
        {
            // Surface-wise min and max refinement level
            level (1 1);

            faceZone topAir;
            cellZone topAir;
            cellZoneInside inside;
        }

        heater
        {
            // Surface-wise min and max refinement level
            level (0 0);

            faceZone heater;
            cellZone heater;
            cellZoneInside inside;
        }

        leftSolid
        {
            // Surface-wise min and max refinement level
            level (1 1);

            faceZone leftSolid;
            cellZone leftSolid;
            cellZoneInside inside;
        }

        rightSolid
        {
            // Surface-wise min and max refinement level
            level (1 1);

            faceZone rightSolid;
            cellZone rightSolid;
            cellZoneInside inside;
        }
    }

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        //refinementBox
        //{
        //    mode inside;
        //    levels ((1E15 4));
        //}
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.01 0.01 0.01);


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
}



// Settings for the snapping.
snapControls
{
    // Per final patch (so not geometry!) the layer information
    featureEdges
    {
    }
}



// Settings for the layer addition.
addLayersControls
{
    // Per final patch (so not geometry!) the layer information
    layers
    {
        maxY
        {
            nSurfaceLayers 3;
        }
    }
}

// ************************************************************************* //
