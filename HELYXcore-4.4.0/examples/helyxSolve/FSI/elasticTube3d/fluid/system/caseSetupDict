/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    system
    {
        controlDict
        {
            startFrom           startTime;
            startTime           0;
            stopAt              endTime;
            endTime             0.01;
            deltaT              0.0001;
            writeControl        timeStep;
            writeInterval       10;
            runTimeModifiable   false;
        }
    }
}

regions
{
    region0
    {
        boundaryMesh
        {
            auto0
            {
                type inlet;
            }
            auto2
            {
                type outlet;
            }
            interface
            {
                type wall;
            }
        }

        state (transient ras dynamic);
        turbulenceModel laminar;
        materials (fluid);
        materialProperties
        {
            fluid
            {
                materialType fluid;

                equationOfState rhoConst;
                equationOfStateCoeffs
                {
                    rho     1000;
                }

                molWeight 32.9;

                muModel         scalarFunction1;
                muModelCoeffs
                {
                    mu 		3e-3;
                }
                kappaModel      kappaSutherland;

                energy          sensibleInternalEnergy;
                thermodynamics  hConst;
                thermodynamicsCoeffs
                {
                    Cp          1007;
                    Hf          0;
                }
            }
            referenceFields
            {
                p               [ 1 -1 -2 0 0 0 0 ] 100000;
            }
        }
        system
        {
            fvOptions
            {
                preciceAdapter
                {
                    type preciceAdapter;
                    libs ("libpreciceAdapter.so");
                }
            }
            fvSolution
            {
                PIMPLE
                {
                    nCorrectors 3;
                    nNonOrthogonalCorrectors 2;
                    tolerance 1e-5;
                    relTol 0;
                    maxIter 30;
                    minIter 1;
                    pisoTol 1e-1;
                    correctPhi true;
                }
            }
            preciceDict
            {
                preciceConfig "../precice/precice-config.xml";
                participant Fluid;
                modules (FSI);
                interfaces
                {
                    Interface1
                    {
                        mesh              Fluid-Mesh-Nodes;
                        patches           (interface);
                        locations         faceNodes;

                        readData
                        (
                          DisplacementDelta
                        );

                        writeData
                        (
                        );
                    }

                    Interface2
                    {
                        mesh              Fluid-Mesh-Faces;
                        patches           (interface);
                        locations         faceCenters;

                        readData
                        (
                        );

                        writeData
                        (
                          Force
                        );
                    }
                }
            }
        }
        constant
        {
            dynamicMeshDict
            {
                mover
                {
                    type            motionSolver;
                    libs            ( "libfvMeshMovers.so" "libfvMotionSolvers.so" );

                    motionSolver    displacementLaplacian;
                    displacementLaplacianCoeffs
                    {
                        diffusivity	quadratic inverseDistance (interface);
                    }
                    frozenDiffusion yes;
                    distancePatches (interface);
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type fixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                }
            }
            p
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
        }
        boundaryConditions
        {
            auto0
            {
                U
                {
                    type            pressureVelocity;
                    value           uniform (0 0 0);
                }
                p
                {
                    type            uniformFixedValue;
                    uniformValue    table
                    (
                        (0 1.3332e3)
                        (3e-3 1.3332e3)
                        (3.1e-3 0)
                        (1e-2 0)
                    );
                }
            }
            auto2
            {
                U
                {
                    type            pressureVelocity;
                    value           uniform (0 0 0);
                }
                p
                {
                    type            fixedValue;
                    value           uniform 0;
                }
            }
            interface
            {
                U
                {
                    type            movingWallVelocity;
                    value           uniform (0 0 0);
                }
            }
        }
    }
}


// ************************************************************************* //
