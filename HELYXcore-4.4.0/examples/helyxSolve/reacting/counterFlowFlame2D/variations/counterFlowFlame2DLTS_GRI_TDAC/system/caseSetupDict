/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields yes;
        resetBoundaryFields yes;
        resetSystemDicts yes;
        resetConstDicts yes;
        resetBoundaryMesh yes;
        deleteUnusedFields yes;
    }

    regionGroups    1 ( fluid 1 ( region0 ) );

    system
    {
        controlDict
        {
            application     helyxSolve;
            startFrom       startTime;
            deltaT          1;
            stopAt          endTime;
            endTime         1500;
            writeControl    runTime;
            writeInterval   100;
            runTimeModifiable true;
            adjustTimeStep  yes;
            maxCo           0.4;
        }
    }

    functions
    {
        VR
        {
            type volumeReport;
            regions ( region0 );
            fields ( T U p );
            writeControl timeStep;
            executeControl timeStep;
            writeInterval 1;
            executeInterval 1;
            functionObjectLibs ("libreport.so" );
        }
        Qdot
        {
            type            Qdot;
            libs            ( "libfieldFunctionObjects.so" );
            executeControl  writeTime;
            writeControl    writeTime;
        }
    }
}

regions
{
    region0
    {
        materials
        (
            CH4 CH2O CH3O H O2 H2 O OH H2O HO2 H2O2 C CH CH2 "CH2(S)" CH3 CO
            CO2 HCO CH2OH CH3OH C2H C2H2 C2H3 C2H4 C2H5 C2H6 HCCO CH2CO HCCOH
            N NH NH2 NH3 NNH NO NO2 N2O HNO CN HCN H2CN HCNN HCNO HOCN HNCO NCO
            N2 AR C3H7 C3H8 CH2CHO CH3CHO
        );

        materialProperties
        {
            materialType    fluid;
            mixture         standardMixture;
            defaultSpecie   N2;
            energy          sensibleEnthalpy;

            #include "compressibleGasGRI"

            referenceFields
            {
                p [ 1 -1 -2 0 0 0 0 ] 0;
            }
        }
        state ( transient ras energy reacting );

        turbulenceModel laminar;

        system
        {
            fvSchemes
            {
                ddtSchemes { default localEuler; }

                gradSchemes
                {
                    default         Gauss linear;
                    turbulence      Gauss linear;
                    gradU           Gauss linear;
                    grad(h)         Gauss linear;
                    grad(e)         Gauss linear;
                    grad(K)         Gauss linear;
                    grad(T)         Gauss linear;
                }
                divSchemes
                {
                    default         none;
                    div(phi,U)      Gauss limitedLinearV 1;
                    div(phi,Yi)     Gauss limitedLinear 1;
                    div(phi,Yi_h)   Gauss limitedLinear 1;
                    div(Ji,hi)      Gauss limitedLinear 1;
                    div(phi,h)      Gauss limitedLinear 1;
                    div(phi,K)      Gauss limitedLinear 1;
                    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
                }
                laplacianSchemes
                {
                    default         Gauss linear orthogonal;
                    laplacian((rho*nuEff),U) Gauss linear orthogonal;
                    laplacian(rhorAUf,p) Gauss linear orthogonal;
                    laplacian(rhoD_Yi,Yi) Gauss linear orthogonal;
                    laplacian(kappa,T) Gauss linear orthogonal;
                }
                interpolationSchemes { default linear; }
                snGradSchemes { default orthogonal; }
            }
            fvSolution
            {
                solvers
                {
                    rho { solver diagonal; preconditioner DIC; tolerance 0; relTol 0; }
                    rhoFinal { solver diagonal; preconditioner DIC; tolerance 0; relTol 0; }

                    p { solver PCG; preconditioner DIC; tolerance 1e-6; relTol 0.1; }
                    pFinal { solver PCG; preconditioner DIC; tolerance 1e-6; relTol 0.0; }

                    h { solver PBiCGStab; preconditioner DILU; tolerance 1e-6; relTol 0.1; }
                    hFinal { solver PBiCGStab; preconditioner DILU; tolerance 1e-6; relTol 0; }

                    U { solver PBiCGStab; preconditioner DILU; tolerance 1e-6; relTol 0.1; }
                    UFinal { solver PBiCGStab; preconditioner DILU; tolerance 1e-6; relTol 0; }

                    Yi
                    {
                        solver          GAMG;
                        agglomerator    algebraicPair;
                        mergeLevels     1;
                        cacheAgglomeration true;
                        nCellsInCoarsestLevel 200;
                        smoother        symGaussSeidel;
                        minIter         1;
                        scaleCorrection true;
                        tolerance       1e-07;
                        relTol          0.001;
                        preconditioner  DILU;
                        maxIter         1;
                    }
                    YiFinal
                    {
                        solver          GAMG;
                        agglomerator    algebraicPair;
                        mergeLevels     1;
                        cacheAgglomeration true;
                        nCellsInCoarsestLevel 200;
                        smoother        symGaussSeidel;
                        minIter         1;
                        scaleCorrection true;
                        tolerance       1e-07;
                        relTol          0;
                        preconditioner  DILU;
                        maxIter         1;
                    }
                }

                relaxationFactors
                {
                    fields { p 1; rho 1; pFinal 1; }
                    equations
                    {
                        k               1;
                        kFinal          1;
                        omega           1;
                        omegaFinal      1;
                        U               1;
                        UFinal          1;
                        Yi              1;
                        YiFinal         1;
                        h               1;
                        e               1;
                        T               1;
                        hFinal          1;
                        eFinal          1;
                        TFinal          1;
                        "ILambda.*"     1;
                    }
                }

                PIMPLE
                {
                    ddtPhiCorr      yes;
                    momentumPredictor no;
                    nOuterCorrectors 1;
                    nCorrectors     1;
                    maxDeltaT       1e-4;
                    maxCo           1;
                    alphaTemp       0.05;
                    rDeltaTSmoothingCoeff 1;
                    rDeltaTDampingCoeff 1;
                    residualControl
                    {
                        U { relTol 0; tolerance 0; }
                        k { relTol 0; tolerance 0; }
                        epsilon { relTol 0; tolerance 0; }
                        omega { relTol 0; tolerance 0; }
                        nuTilda { relTol 0; tolerance 0; }
                        T { relTol 0; tolerance 0; }
                        p { relTol 0; tolerance 0; }
                    }
                }
            }
            fvOptions { reactions { isReactingFoam  yes; } }
        }

        constant
        {
            turbulenceProperties
            {
                laminar { laminarModel Stokes; printCoeffs on; Sct 1; }
            }
            combustionProperties { combustionModel laminar; laminarCoeffs {} }

            chemistryProperties
            {
                chemistryType { solver ode; }
                chemistry on;
                initialChemicalTimeStep 1e-07;
                odeCoeffs { solver seulex; absTol 1e-8; relTol 0.1; }
                elements ( O H C N Ar );
                reduction
                {
                    // Switch logging of the reduction statistics and performance
                    log         on;

                    // Tolerance depends on the reduction method, see details for each method
                    tolerance   1e-4;

                    // Available methods: DRG, DAC, DRGEP, PFA, EFA
                    method DAC;

                    // Search initiating set (SIS) of species, needed for most methods
                    initialSet ( CO CH4 HO2 );

                    // For DAC, option to automatically change the SIS switch from HO2 to H2O
                    // and CO to CO2, + disable fuel
                    automaticSIS    off;

                    // When automaticSIS, the method needs to know the fuel
                    fuelSpecies ( (CH4 1) );
                }

                tabulation
                {
                    // Switch logging of the tabulation statistics and performance
                    log         on;

                    printProportion    off;

                    printNumRetrieve   off;

                    // Tolerance used for retrieve and grow
                    tolerance   3e-3;

                    // ISAT is the only method currently available
                    method    ISAT;

                    // Scale factors used in the definition of the ellipsoid of accuracy
                    scaleFactor
                    {
                        otherSpecies 1;
                        Temperature  10000;
                        Pressure     1e15;
                        deltaT       1;
                    }

                    // Maximum number of leafs stored in the binary tree
                    maxNLeafs  2000;

                    // Maximum life time of the leafs (in time steps) used in unsteady
                    // simulations to force renewal of the stored chemPoints and keep the tree
                    // small
                    chPMaxLifeTime 100;

                    // Maximum number of growth allowed on a chemPoint to avoid distorted
                    // chemPoints
                    maxGrowth  10;

                    // Number of time steps between analysis of the tree to remove old
                    // chemPoints or try to balance it
                    checkEntireTreeInterval  5;

                    // Parameters used to decide whether to balance or not if the tree's depth
                    // is larger than maxDepthFactor*log2(nLeafs) then balance the tree
                    maxDepthFactor   2;

                    // Try to balance the tree only if the size of the tree is greater
                    minBalanceThreshold 30;

                    // Activate the use of a MRU (most recently used) list
                    MRURetrieve false;

                    // Maximum size of the MRU list
                    maxMRUSize 0;

                    // Allow to grow points
                    growPoints  true;

                    // When mechanism reduction is used, new dimensions might be added
                    // maxNumNewDim set the maximum number of new dimensions added during a
                    // growth
                    maxNumNewDim 10;
                }
                #include "reactionsGRI"
            }
        }

        boundaryMesh
        {
            fuel { type inlet; }
            air { type wall; }
            outlet { type outlet; }
            frontAndBack { type empty; }
        }

        fields
        {
            U { initialisation{type fixedValue; value uniform (0 0 0);} }
            T { initialisation{type fixedValue; value uniform 2000;} }
            p { initialisation{type fixedValue; value uniform 1e5;} }
            nut { initialisation{type fixedValue; value uniform 0;} }
            alphat { initialisation{type fixedValue; value uniform 0;} }
            CH4 { initialisation{type fixedValue; value uniform 0;} }
            CO2 { initialisation{type fixedValue; value uniform 0;} }
            H2O { initialisation{type fixedValue; value uniform 0;} }
            O2 { initialisation{type fixedValue; value uniform 0;} }
            N2 { initialisation{type fixedValue; value uniform 1;} }
        }

        boundaryTypeDefaults {}

        boundaryConditions
        {
            fuel
            {
                U { type fixedValue; value uniform (0.1 0 0); inputValue uniform (0.1 0 0); }
                p { type zeroGradient; }
                T { type fixedValue; inputValue uniform 293; value uniform 293; }
                alphat { type fixedValue; value uniform 0; }
                CH4 { type fixedValue; value uniform 1.0; }
                CO2 { type fixedValue; value uniform 0; }
                H2O { type fixedValue; value uniform 0; }
                N2 { type fixedValue; value uniform 0; }
                O2 { type fixedValue; value uniform 0; }
            }
            air
            {
                U { type fixedValue; value uniform (-0.1 0 0); inputValue uniform (-0.1 0 0);}
                p { type zeroGradient; }
                T { type fixedValue; inputValue uniform 293; value uniform 293; }
                alphat { type fixedValue; value uniform 0; }
                CH4 { type fixedValue; value uniform 0.0; }
                CO2 { type fixedValue; value uniform 0; }
                H2O { type fixedValue; value uniform 0; }
                N2 { type fixedValue; value uniform 0.77; }
                O2 { type fixedValue; value uniform 0.23; }
            }
            outlet
            {
                U { type pressureInletOutletVelocity; value uniform (0 0 0); }
                p
                {
                    type totalPressure;
                    inputValue uniform 1e5;
                    p0 uniform 1e5;
                    U U;
                    phi phi;
                    rho rho;
                    psi none;
                    gamma 1;
                    value uniform 1e5;
                }
                T { type inletOutlet; inletValue uniform 293; inputValue uniform 293; value uniform 293; }
                alphat { type zeroGradient; }
                CH4 { type inletOutlet; inletValue uniform 0.0; value uniform 0.0; }
                CO2 { type inletOutlet; inletValue uniform 0.0; value uniform 0.0; }
                H2O { type inletOutlet; inletValue uniform 0.0; value uniform 0.0; }
                N2 { type inletOutlet; inletValue uniform 1; value uniform 1; }
                O2 { type inletOutlet; inletValue uniform 0.0; value uniform 0.0; }
            }
        }
    }
}


// ************************************************************************* //
