/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    system
    {
        controlDict
        {
            application     helyxSolve;
            stopAt          endTime;
            endTime         4;
            deltaT          0.001;
            writeInterval   0.125;
            maxCo           0.5;
            maxAlphaCo      0.5;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p T );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state ( transient ras vof );

        materials ( water oil mercury air );

        materialProperties
        {
            air
            {
                equationOfStateCoeffs
                {
                    rho             1;
                    rho0            0;
                }
                muModelCoeffs
                {
                    mu              1.48e-05;
                }
            }
            mercury
            {
                materialType    fluid;
                thermodynamics  hConst;
                equationOfState rhoConst;
                molWeight       200.59;
                equationOfStateCoeffs
                {
                    rho             13529;
                }
                thermodynamicsCoeffs
                {
                    Cp              139;
                    Hf              0;
                }
                muModel         scalarFunction1;
                muModelCoeffs
                {
                    mu              0.001522;
                }
                kappaModel      kappaPrandtl;
                kappaModelCoeffs
                {
                    Pr              0.022;
                }
            }
            oil
            {
                muModelCoeffs
                {
                    mu              0.0005;
                }
            }
            water
            {
                muModelCoeffs
                {
                    mu              0.001;
                }
            }
            buoyancyModel none;
            referenceFields
            {
                TConst [ 0 0 0 1 0 0 0 ] 273.15;
            }

        }
        system
        {
            meshObjects
            {
                rotatingFrame
                {
                    type            motionCoordinateFrame;
                    motionFunction
                    {
                        type rotatingMotion;
                        omega               6.2831853;
                    }
                    coordinateSystem
                    {
                        type            cartesian;
                        origin          ( 0 0 0 );
                        e1              ( 1 0 0 );
                        e2              ( 0 1 0 );
                    }
                }
            }
            fvOptions
            {
                MRF1
                {
                    type        MRFSource;
                    MRFSourceCoeffs
                    {
                        selectionMode cellZone;
                        cellZone    rotor;
                        referenceFrame rotatingFrame;
                    }
                }
            }
            fvSolution
            {
                PIMPLE
                {
                    nCorrectors     4;
                }
            }
        }
        boundaryMesh
        {
            rotor
            {
                type            wall;
            }
            stator
            {
                type            wall;
            }
            front
            {
                type            empty;
            }
            back
            {
                type            empty;
            }
        }

        fields
        {
            alpha.water
            {
                initialisation
                {
                    type cellSet;
                    defaultValue uniform 0;
                    setSources
                    (
                        boxToCell
                        {
                            box (0 0 -1) (1 1 1);
                            value 1;
                        }
                    );
                }
            }
            alpha.oil
            {
                initialisation
                {
                    type cellSet;
                    defaultValue uniform 0;
                    setSources
                    (
                        boxToCell
                        {
                            box (0 -1 -1) (1 0 1);
                            value 1;
                        }
                    );
                }
            }
            alpha.mercury
            {
                initialisation
                {
                    type cellSet;
                    defaultValue uniform 0;
                    setSources
                    (
                        boxToCell
                        {
                            box (-1 -1 -1) (0 0 1);
                            value 1;
                        }
                    );
                }
            }
            alpha.air
            {
                initialisation
                {
                    type cellSet;
                    defaultValue uniform 1;
                    setSources
                    (
                        boxToCell
                        {
                            box (0 0 -1) (1 1 1);
                            value 0;
                        }
                        boxToCell
                        {
                            box (0 -1 -1) (1 0 1);
                            value 0;
                        }
                        boxToCell
                        {
                            box (-1 -1 -1) (0 0 1);
                            value 0;
                        }
                    );
                }
            }
        }
        boundaryConditions
        {
            rotor
            {
                U
                {
                    type            fixedValueVelocity;
                    referenceFrame  rotatingFrame;
                    value uniform (0 0 0);
                }
            }
            stator
            {
                U
                {
                    type            noSlip;
                }
            }
        }
    }
}


// ************************************************************************* //

