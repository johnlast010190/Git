/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    system
    {
        controlDict
        {
            application     helyxSolve;
            stopAt          endTime;
            endTime         40;
            deltaT          0.0001;
            writeInterval   0.05;
            purgeWrite      0;
            adjustTimeStep  yes;
            maxCo           0.5;
            maxAlphaCo      0.5;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p T );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
        probes
        {
            type            probes;
            libs            ("libsampling.so");
            writeControl    writeTime;
            probeLocations
            (
                (0 9.95 19.77)
                (0 -9.95 19.77)
            );
            fixedLocations  false;
            fields
            (
                p
            );
        }
        wallPressure
        {
            type            surfaces;
            libs            ("libsampling.so");
            writeControl    writeTime;
            surfaceFormat   raw;
            fields
            (
                p
            );
            interpolationScheme cellPoint;
            surfaces
            (
                walls
                {
                    type        patch;
                    patches     (walls);
                    triangulate false;
                }
            );
        }
    }
}

regions
{
    region0
    {
        state ( transient ras vof );

        materials ( water air );

        materialProperties
        {
            air
            {
                equationOfState perfectGas;
                muModelCoeffs
                {
                    mu          1.48e-05;
                }
                kappaModelCoeffs
                {
                    Pr          0.7;
                }
            }
            water
            {
                muModelCoeffs
                {
                    mu          3.645e-4;
                }
            }
            referenceFields
            {
                p       [1 -1 -2 0 0 0 0] 101325;
                TConst  [ 0 0 0 1 0 0 0 ] 273.15;
            }
        }
        constant
        {
            dynamicMeshDict
            {
                mover
                {
                    type            motionSolver;
                    libs            ("libfvMeshMovers.so" "libfvMotionSolvers.so");
                    motionSolver    solidBody;
                    referenceFrame  SDAFrame;
                }
            }
        }
        system
        {
            meshObjects
            {
                SDAFrame
                {
                    type            dynamicMotionCoordinateFrame;
                    motionFunction
                    {
                        type  SDA;
                        CofG            (0 0 0);
                        lamda           50;
                        rollAmax        0.22654;
                        rollAmin        0.10472;
                        heaveA          3.79;
                        swayA           2.34;
                        Q               2;
                        Tp              13.93;
                        Tpn             11.93;
                        dTi             0.059;
                        dTp             -0.001;
                    }
                    coordinateSystem
                    {
                        type            cartesian;
                        origin          ( 0 0 0 );
                        e1              ( 1 0 0 );
                        e3              ( 0 1 0 );
                    }
                }
            }
            fvSolution
            {
                solvers
                {
                    "pcorr.*"
                    {
                        solver          PCG;
                        preconditioner
                        {
                            preconditioner  GAMG;
                            tolerance       1e-05;
                            smoother        DICGaussSeidel;
                            cacheAgglomeration no;
                        }

                        tolerance       1e-05;
                    }
                }
            }
        }
        boundaryMesh
        {
            walls
            {
                type            wall;
            }
            front
            {
                type            empty;
            }
            back
            {
                type            empty;
            }
        }
        fields
        {
            p { initialisation{type buoyantPressure; value uniform 1e6;} }
            alpha.water
            {
                initialisation
                {
                    type cellSet;
                    defaultValue uniform 0;
                    setSources
                    (
                        boxToCell
                        {
                            box (-100 -100 -100) (100 100 0);
                            value 1;
                        }
                    );
                }
            }
        }
        boundaryConditions
        {
            walls
            {
                U
                {
                    type    movingWallVelocity;
                    value   uniform (0 0 0);
                }
            }
        }
    }
}


// ************************************************************************* //
