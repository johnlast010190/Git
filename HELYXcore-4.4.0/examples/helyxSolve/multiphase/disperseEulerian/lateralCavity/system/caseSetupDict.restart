/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict.restart;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        deleteUnusedFields false;
        reuseExistingDictionaries true;
    }
    system
    {
        controlDict
        {
            application     helyxSolve;
            startFrom       latestTime;
            endTime         400;
            deltaT          constant 1;
            writeControl    timeStep;
            writeInterval   50;
        }
    }
    functions
    {
        VR_drop
        {
            type            volumeReport;
            fields          ( U.drop alpha.drop );
	        writeControl    onEnd;
            executeControl  onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state           ( );
        fieldMaps
        {
            alpha.drop      phase;
            U.drop          UdispersedPhase;
        }
        constant
        {
            g
            {
                dimensions      [ 0 1 -2 0 0 0 0 ];
                value           ( 0 0 -9.81 );
            }
            disperseEulerianProperties
            {
                phases
                (
                    drop
                    {
                        rhoc            rhoc [ 1 -3 0 0 0 ] 1.205;
                        muc             muc [ 1 -1 -1 0 0 ] 1.46e-05;
                        rhod            rhod [ 1 -3 0 0 0 ] 5000;
                        diam            diam [ 0 1 0 0 0 ] 1e-05;
                        dragModel       SchillerNaumann;
                        liftModel       none;
                        Cl              0.5;
                        turbulentDispersionModel none;
                        Sct             1e+06;
                    }

                );
            }
        }
        system
        {
            fvSchemes
            {
                ddtSchemes
                {
                    default         CoEuler phid none 0.5;
                }
                gradSchemes
                {
                    default         none;
                    grad(U)         cellLimited Gauss linear 1;
                    grad(U.drop)    leastSquares;
                    grad(alpha.drop) leastSquares;
                }
                divSchemes
                {
                    default         Gauss linear;
                    "div\(phi.*,alpha.*\)" Gauss upwind;
                    "div\(phi.*,U.*\)" Gauss linearUpwindV gradU;
                }
                interpolationSchemes
                {
                    flux(U)         linear;
                }
            }
            fvSolution
            {
                solvers
                {
                    U.drop
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        minIter         1;
                        tolerance       1e-06;
                        relTol          0.01;
                    }
                    alpha.drop
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        minIter         1;
                        tolerance       1e-06;
                        relTol          0.01;
                    }
                }
                SIMPLE
                {
                    nNonOrthogonalCorrectors 1;
                }
            }
            fvOptions
            {
                spray
                {
                    type            disperseEulerian;
                    active          true;
                    hookOp          solve;
                    hookField       U;
                    phiName         ;
                    alphaTD         true;
                    solveTD         false;
                    disperseEulerianCoeffs
                    {
                        oneExecPerIter  true;
                        fvOptions {}
                    }
                }
            }
        }
        fields
        {
            U.drop
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform ( 0 0 0 );
                }
            }
            alpha.drop
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform 4.5e-10;
                }
            }
        }
        boundaryTypeDefaults
        {
            wall
            {
                alpha.drop
                {
                    type            inletOutlet;
                    inletValue      uniform 0;
                    value           uniform 0;
                    phi             phid;
                    fluxTransition  true;
                }
                U.drop
                {
                    type            zeroGradient;
                }
            }
        }
    }
}


// ************************************************************************* //
