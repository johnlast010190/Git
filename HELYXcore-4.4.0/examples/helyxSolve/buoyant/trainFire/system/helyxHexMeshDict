/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      helyxHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap true;
addLayers true;
blockType auto;
blockData ( 0.35 0 );
crackDetection false;
crackTol 0.05;
allowTopoChanges true;
finalDecomposition ptscotch;
meshMode quality;

geometry
{
    fan.stl
    {
        type triSurfaceMesh;
        name fan;
        appendRegionName false;
    }
    fanWall.stl
    {
        type triSurfaceMesh;
        name fanWall;
        appendRegionName false;
    }
    ground.stl
    {
        type triSurfaceMesh;
        name ground;
        appendRegionName false;
    }
    opening1.stl
    {
        type triSurfaceMesh;
        name opening1;
        appendRegionName false;
    }
    opening2.stl
    {
        type triSurfaceMesh;
        name opening2;
        appendRegionName false;
    }
    train.stl
    {
        type triSurfaceMesh;
        name train;
        appendRegionName false;
    }
    tunnel.stl
    {
        type triSurfaceMesh;
        name tunnel;
        appendRegionName false;
    }
    fireRefinement.stl
    {
        type triSurfaceMesh;
        name fireRefinement;
        appendRegionName false;
    }
    fireSource.stl
    {
        type triSurfaceMesh;
        name fireSource;
        appendRegionName false;
    }
}

castellatedMeshControls
{
    features ();
    refinementSurfaces
    {
        fan
        {
            level ( 0 0 );
        }
        fanWall
        {
            level ( 0 0 );
        }
        ground
        {
            level ( 0 0 );
        }
        opening1
        {
            level ( 0 0 );
        }
        opening2
        {
            level ( 0 0 );
        }
        train
        {
            level ( 1 1 );
        }
        tunnel
        {
            level ( 0 1 );
        }
        fireSource
        {
            level ( 0 0 );
            faceType internal;
            faceZone fireSource;
            cellZoneInside inside;
            cellZone fireSource;
            baffleChecks true;
            allowFreeStandingZoneFaces false;
        }
    }
    refinementRegions
    {
        fireRefinement
        {
            mode inside;
            levels ( ( 100000.0 2 ) );
        }
        fireSource
        {
            mode inside;
            levels ( ( 100000.0 2 ) );
        }
    }
    maxLocalCells 250000000;
    maxGlobalCells 1000000000;
    minRefinementCells 100;
    maxLoadUnbalance 0.1;
    nCellsBetweenLevels 2;
    resolveFeatureAngle -60.0;
    featureRefineAngle 20.0;
    refineSurfaceBoundary false;
    minBaffleAngle -60.0;
    allowFreeStandingZoneFaces false;
    balanceThenRefine true;
    nGapRefinements 0;
    minZoneRegionSize 1;
    additionalInsideCheck false;
    moveCentroidsTol -1.0;
    interfaceRefine true;
    splitCells false;
    wrapper
    {
        wrap false;
        volSources true;
        volDistance 1.0;
        meshInMM false;
        maxIter 200;
        writeFields false;
        invert false;
        sigma 3.0;
        cutoff 1000.0;
    }
    locationsInMesh ( ( ( 47.0 0.0 0.0 ) none ) );
    interZonesBaffle false;
    singleCellGapClosure false;
    filterFreeStandingHoles false;
    fullLeakChecks true;
    locationsOutsideMesh ();
}

snapControls
{
    featureEdges {}
    nOuterIter 1;
    nPreFeatureIter 0;
    nSolveIter 10;
    nFeatureIter 60;
    globalFeatureEdges true;
    globalRegionSnap false;
    nSmoothPatch 2;
    tolerance 4.0;
    nRelaxIter 5;
    zoneFeatureSnapping true;
    directFeatureSnapping true;
    geometryFeatureLines true;
    snapSurfBoundary true;
    collapseTol 0.25;
    enlargeStencil true;
    smoothSnappedSurface true;
    featureSnapChecks true;
    concaveTol 0.3;
    nSliverSmooths 10;
    mergeBoundaryFaces true;
    averageSurfaceNormal true;
    repatchOverlapping false;
    acuteReflexSnapAngle 25.0;
    minAcuteReflexSnapAngle 8.0;
}

addLayersControls
{
    layers
    {
        fan
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        fanWall
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        ground
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        opening1
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        opening2
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        train
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        tunnel
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        fireSource
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp false;
        }
        fireSource_slave
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp false;
        }
    }
    expansionRatio 1.25;
    finalLayerThickness 0.4;
    minThickness 0.2;
    featureAngleMerge 45;
    featureAngleTerminate 80.0;
    nRelaxIter 5;
    maxFaceThicknessRatio 2.0;
    maxThicknessToMedialRatio 0.3;
    minMedialAxisAngle 90;
    maxLayerIter 30;
    growConvexEdge true;
    growConcaveEdge true;
    growUpPatches true;
    rebalance false;
    layerRecovery 1;
    nSmoothThickness 10;
    nSmoothSurfaceNormals 6;
    nSmoothNormals 3;
    maxProjectionDistance 10000.0;
    maxCellDistortion 50.0;
    medialRatioExp 1;
    growZoneLayers false;
    writeVTK true;
    fixedFCH false;
}

meshQualityControls
{
    maxNonOrtho 70.0;
    maxBoundarySkewness 20;
    maxInternalSkewness 6;
    maxConcave 80.0;
    minFlatness 0.5;
    minVol 1.0e-14;
    minTetQuality -1.0e30;
    minArea 1.0e-13;
    minTwist 0.05;
    minDeterminant 1.0e-4;
    minFaceWeight 0.08;
    minVolRatio 0.02;
    minTriangleTwist -0.99;
    errorReduction 0.75;
    nSmoothScale 10;
    minVolCollapseRatio -1.0;
    faceFaceCells false;
    minSnapRelativeVolume -1;
    smoothAlignedEdges false;
    minSnapRelativeTetVolume -1;
    maxGaussGreenCentroid -1;
    nVolSmoothIter 8;
    maxCellAspectRatio -1.0;
    maxFaceCentreNonOrtho 180.0;
    minEdgeLength -1.0;
}

debug 0;
mergeTolerance 1.0e-6;
meshAlgorithm standard;
outputProtected false;

meshOptimization
{
    type cfMeshOptimize;
    cfMeshOptimizeCoeffs
    {
        qualityThreshold 0.0;
        numLaplaceIterations 0;
        maxNumGlobalIterations 10;
        maxNumIterations 50;
        maxNumSurfaceIterations 2;
        relaxedCheck false;
        finalRelaxedCheck true;
        checkWarped false;
    }
}

cellRemoval
{
    checks ();
    patch oldInternalFaces;
    removeCells true;
    writeVTK true;
}


// ************************************************************************* //
