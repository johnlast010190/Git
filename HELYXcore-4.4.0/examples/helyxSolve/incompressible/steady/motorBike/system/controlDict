/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    arch        "LSB;label=32;scalar=64";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     helyxSolve;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         500;

deltaT          1;

writeControl    timeStep;

writeInterval   100;

purgeWrite      0;

writeFormat     binary;

writePrecision  10;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

libs            1 ( "" );

adjustTimeStep  false;

functions
{
    VR
    {
        functionObjectLibs ( "libreport.so" );
        logToFile       yes;
        fields          ( U p );
        executeControl  onEnd;
        type            volumeReport;
        writeControl    onEnd;
        outputFileFormat tsv;
    }
    streamLines
    {
        libs            ( "libfieldFunctionObjects.so" );
        type            streamLine;
        writeControl    writeTime;
        setFormat       vtk;
        trackForward    true;
        fields          ( p U k );
        lifeTime        10000;
        nSubCycle       5;
        cloud           particleTracks;
        seedSampleSet
        {
            type            uniform;
            axis            x;
            start           ( -1.001 -0.05 0.0011 );
            end             ( -1.001 -0.05 1.0011 );
            nPoints         20;
        }
    }
    near
    {
        libs            ( "libfieldFunctionObjects.so" );
        type            nearWallFields;
        writeControl    writeTime;
        executeControl  writeTime;
        fields          ( ( U UNear ) );
        patches         ( motorBikeGroup );
        distance        0.001;
    }
    wallBoundedStreamLines
    {
        libs            ( "libfieldFunctionObjects.so" );
        type            wallBoundedStreamLine;
        writeControl    writeTime;
        setFormat       vtk;
        U               UNear;
        trackForward    true;
        interpolationScheme cellPoint;
        fields          ( p U k UNear );
        lifeTime        100;
        cloud           wallBoundedParticleTracks;
        seedSampleSet
        {
            type            patchSeed;
            uniformCoeffs
            {
                axis            x;
                start           ( 0.0035 0.0999 0.0001 );
                end             ( 0.0035 0.0999 0.0099 );
                nPoints         20;
            }
            cloudCoeffs
            {
                axis            x;
                points          ( ( 0.3515165487 -0.01160853756 1.24 ) );
            }
            patchSeedCoeffs
            {
                patches         ( motorBikeGroup );
                axis            x;
                maxPoints       20000;
            }
        }
    }
    cuttingPlane
    {
        functionObjectLibs ( "libsampling.so" );
        fields          ( p U );
        interpolationScheme cellPoint;
        surfaceFormat   vtk;
        surfaces        
        (
            yNormal
            {
                type            cuttingPlane;
                planeType       pointAndNormal;
                pointAndNormalDict
                {
                    point           ( 0 0 0 );
                    normal          ( 0 1 0 );
                }
                interpolate     true;
            }

        )
;
        writeControl    writeTime;
        type            surfaces;
        libs            ( "libsampling.so" );
    }
    forceCoeffs1
    {
        type            forceCoeffs;
        libs            ( "libforces.so" );
        writeControl    timeStep;
        timeInterval    1;
        log             yes;
        patches         ( motorBikeGroup );
        rho             rhoInf;
        rhoInf          1.225;
        liftDir         ( 0 0 1 );
        dragDir         ( 1 0 0 );
        CofR            ( 0.72 0 0 );
        pitchAxis       ( 0 1 0 );
        magUInf         20;
        lRef            1.42;
        Aref            0.75;
        outputFileFormat tsv;
    }
    ensightWrite
    {
        type            ensightWrite;
        libs            ( "libutilityFunctionObjects.so" );
        log             true;
        fields          ( U p "(k|epsilon|omega)" );
        writeControl    writeTime;
        writeInterval   1;
    }
}


// ************************************************************************* //
