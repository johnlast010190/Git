/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields yes;
        resetBoundaryFields yes;
        resetSystemDicts yes;
        resetConstDicts yes;
        resetBoundaryMesh yes;
        deleteUnusedFields yes;
    }
    regionGroups    1 ( fluid 1 ( region0 ) );
    system
    {
        controlDict
        {
            application     helyxSolve;
            stopAt          endTime;
            endTime         500;
            deltaT          1;
            writeControl    timeStep;
            writeInterval   100;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        boundaryMesh
        {
            AMI1
            {
                type            discreteMixingPlane;
                neighbourPatch  AMI2;
                transformType   none;
            }
            AMI2
            {
                type            discreteMixingPlane;
                neighbourPatch  AMI1;
                nSubdivisions    12;
                sectorDefinition userDefined;
                nSectors  1;
                sectorRotationAxis ( 0 0 1 );
                sectorRotationCentre ( 0 0 0);
                transformType   none;
            }
        }
        state           ( steady ras );
        turbulenceModel kEpsilon;
        materials       ( air );
        materialProperties
        {
            air
            {
                muModelCoeffs
                {
                    mu 1.8075e-5; // nu = 1.5e-5
                }
            }
        }
        system
        {
            fvOptions
            {
                MRF1
                {
                    type        MRFSource;
                    active      yes;
                    MRFSourceCoeffs
                    {
                        selectionMode cellZone;
                        cellZone    rotor;
                        referenceFrame rotFrame;
                    }
                }
            }
            meshObjects
            {
                rotFrame
                {
                    type            motionCoordinateFrame;
                    motionFunction
                    {
                        type rotatingMotion;
                        rotatingMotionCoeffs
                        {
                            omega     104.72;
                        }
                    }
                    coordinateSystem
                    {
                        type            cartesian;
                        origin          (0 0 0);
                        e1              ( -1 0 0 );
                        e3              ( 0 0 1 );
                    }
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform (0 0 0);
                }
            }
            p
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform 0;
                }
            }
            k
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform 1;
                }
            }
            epsilon
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform 20;
                }
            }
        }
        boundaryConditions
        {
            rotor
            {
                U
                {
                    type            fixedValueVelocity;
                    referenceFrame  rotFrame;
                    value uniform (0 0 0);
                }
            }
        }
    }
}


// ************************************************************************* //
