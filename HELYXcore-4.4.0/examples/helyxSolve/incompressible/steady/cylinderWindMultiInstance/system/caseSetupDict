/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields true;
        resetBoundaryFields true;
        resetSystemDicts true;
        resetConstDicts true;
        resetBoundaryMesh true;
    }
    regionGroups    ( fluidRegions ( dir1 dir2 dir3 ) );
    system
    {
        controlDict
        {
            application     helyxSolve;
            startFrom       startTime;
            startTime       0;
            stopAt          endTime;
            endTime         10;
            deltaT          constant 1;
            writeControl    timeStep;
            writeInterval   10;
        }
    }
    solutionMesh
    {
        dir1            region0;
        dir2            region0;
        dir3            region0;
    }
    solutionSchedule
    {
        dir1            ( ( dir1 ) );
        dir2            ( ( dir2 ) );
        dir3            ( ( dir3 ) );
    }
    functions
    {
        Lawson
        {
            type            pedestrianComfort;
            instances       ( dir1 dir2 dir3 );
            functionObjectLibs ( "libutilityFunctionObjects.so" );
            writeControl    onEnd;
            UName           U;
            windDirections  ( dir1 dir2 dir3 );
            WeibullParameters ( ( 2.1 4.63 1.7 ) ( 2 5.06 1.8 ) ( 2.4 5.4 1.87 ) );
            referenceHeight ( 100 200 300 );
            referenceVelocity ( 10 10 10 );
            scaleFactor     table ( ( 100 0.96 ) ( 120 1 ) ( 160 1.07 ) ( 200 1.13 ) ( 250 1.19 ) ( 300 1.24 ) ( 450 1.37 ) ( 600 1.48 ) );
            criteriaThresholds ( 2.5 4 6 );
            criteriaExceedance ( 5 5 5 );
        }
    }
}

regions
{
    fluidRegions
    {
        state (steady ras);
        boundaryMesh
        {
            ffminz
            {
                type wall;
            }
            ffmaxz
            {
                type patch;
            }
            cylinder
            {
                type inlet;
            }
            main
            {
                type wall;
            }
            annex
            {
                type wall;
            }
        }
        turbulenceModel kOmegaSST;
        materials (air);
        materialProperties
        {
            air
            {
                equationOfState rhoConst;
                thermodynamics  hConst;
                energy          sensibleInternalEnergy;
                molWeight       29.96;
                equationOfStateCoeffs
                {
                    rho             1.205;
                }
                thermodynamicsCoeffs
                {
                    Cp              1006.8;
                    Hf              0;
                }
                muModel         scalarFunction1;
                muModelCoeffs
                {
                    mu              1.9137e-05;
                }
                kappaModel      kappaPrandtl;
                kappaModelCoeffs
                {
                    Pr              0.71424;
                }
                referenceFields
                {
                    p               [ 1 -1 -2 0 0 0 0 ] 0;
                }
            }
        }
        system
        {
            fvSchemes
            {
                gradSchemes
                {
                    default         leastSquares;
                    turbulence      cellLimited leastSquares 1;
                    gradU           cellLimited leastSquares 1;
                    grad(p)         Gauss linear;
                }
                divSchemes
                {
                    div(phi,k)      bounded Gauss linearUpwind turbulence;
                    div(phi,omega)  bounded Gauss linearUpwind turbulence;
                }
            }
            fvSolution
            {
                SIMPLE
                {
                    nNonOrthogonalCorrectors 0;
                }
                solution
                {
                    U
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        minIter         1;
                        tolerance       1e-06;
                        relTol          0.1;
                        nSweeps         1;
                    }
                }
            }
        }
        fields
        {
            p
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform 0;
                }
            }
            U
            {
                initialisation
                {
                    type            fixedValue;
                    value           uniform ( -10 0 0 );
                }
            }
            k
            {
                initialisation
                {
                    type            turbulentIL;
                    I               0.05;
                    L               0.01;
                    Uref            1;
                }
            }
            omega
            {
                initialisation
                {
                    type            turbulentIL;
                    I               0.05;
                    L               0.01;
                    Uref            1;
                }
            }
            nut
            {
                initialisation
                {
                    type            turbulentIL;
                    I               0.05;
                    L               0.01;
                    Uref            1;
                }
            }
        }
        boundaryConditions
        {
            ffminz
            {
                nut
                {
                    type            nutUSpaldingWallFunction;
                    value           uniform 0.001;
                }
                omega
                {
                    type            omegaWallFunction;
                    value           uniform 1;
                }
                p
                {
                    type            zeroGradient;
                }
            }
            main
            {
                nut
                {
                    type            nutUSpaldingWallFunction;
                    value           uniform 0.001;
                }
                omega
                {
                    type            omegaWallFunction;
                    value           uniform 1;
                }
                p
                {
                    type            zeroGradient;
                }
            }
            annex
            {
                nut
                {
                    type            nutUSpaldingWallFunction;
                    value           uniform 0.001;
                }
                omega
                {
                    type            omegaWallFunction;
                    value           uniform 1;
                }
                p
                {
                    type            zeroGradient;
                }
            }
            ffmaxz
            {
                p
                {
                    type            fixedMean;
                    meanValue       constant 0;
                    value           uniform 0;
                }
                U
                {
                    type            pressureInletOutletParSlipVelocity;
                    value           uniform ( -10 0 0 );
                }
                omega
                {
                    type            turbulentMixingLengthFrequencyInlet;
                    mixingLength    2;
                    k               k;
                    value           uniform 1;
                }
                k
                {
                    type            turbulentIntensityKineticEnergyInlet;
                    intensity       0.05;
                    value           uniform 0.1;
                }
            }
            cylinder
            {
                p
                {
                    type            zeroGradient;
                }
                U
                {
                    type            windProfileDirectionVelocity;
                    inletValue      uniform ( 10 0 0 );
                    value           uniform ( 0 0 0 );
                    profile         table ( ( 0 0 ) ( 0.5 5 ) ( 1 8 ) ( 2 9 ) ( 10 10 ) ( 20 10 ) );
                    distanceType    z;
                    axis            ( 0 0 1 );
                    windDirection   constant 90;
                    yscale          constant 1;
                }
                k
                {
                    type            interpolatedInletOutlet;
                    profile         table ( ( 0 0.001 ) ( 0.5 1 ) ( 10 0.4 ) ( 20 0.25 ) );
                    distanceType    z;
                    value           uniform 0.1;
                }
                omega
                {
                    type            velocityGradientDissipationInletOutlet;
                    Lmax            2;
                    value           uniform 0.01;
                    inletValue      uniform 0.01;
                }
            }
        }
    }
    dir1
    {
        functions
        {
            VR
            {
                type            volumeReport;
                region          dir1;
                instance        dir1;
                fields          ( U k omega p );
                executeControl  onEnd;
                writeControl    onEnd;
                functionObjectLibs ( "libreport.so" );
                outputFileFormat tsv;
            }
            FF
            {
                type            forces;
                region          dir1;
                instance        dir1;
                functionObjectLibs ( "libforces.so" );
                rhoName         rho;
                executeControl  onEnd;
                writeControl    onEnd;
                log             true;
                CofR            ( 0 0 0 );
                patches         ( main annex );
            }
        }
    }
    dir2
    {
        boundaryConditions
        {
            cylinder
            {
                U
                {
                    type            windProfileDirectionVelocity;
                    value           uniform ( 0 0 0 );
                    profile         table ( ( 0 0 ) ( 0.5 5 ) ( 1 8 ) ( 2 9 ) ( 10 10 ) ( 20 10 ) );
                    distanceType    z;
                    axis            ( 0 0 1 );
                    windDirection   constant 100;
                    yscale          constant 1;
                }
            }
        }
        functions
        {
            VR2
            {
                type            volumeReport;
                regions         ( dir2 );
                instance        dir2;
                fields          ( U k omega p );
                executeControl  onEnd;
                writeControl    onEnd;
                functionObjectLibs ( "libreport.so" );
                outputFileFormat tsv;
            }
            FF2
            {
                type            forces;
                regions         ( dir2 );
                instance        dir2;
                functionObjectLibs ( "libforces.so" );
                rhoName         rho;
                executeControl  onEnd;
                writeControl    onEnd;
                log             true;
                CofR            ( 0 0 0 );
                patches         ( main annex );
            }
        }
    }
    dir3
    {
        boundaryConditions
        {
            cylinder
            {
                U
                {
                    type            windProfileDirectionVelocity;
                    value           uniform ( 0 0 0 );
                    profile         table ( ( 0 0 ) ( 0.5 5 ) ( 1 8 ) ( 2 9 ) ( 10 10 ) ( 20 10 ) );
                    distanceType    z;
                    axis            ( 0 0 1 );
                    windDirection   constant 50;
                    yscale          constant 1;
                }
            }
        }
        functions
        {
            VR3
            {
                type            volumeReport;
                regions         ( dir3 );
                instance        dir3;
                fields          ( U k omega p );
                executeControl  onEnd;
                writeControl    onEnd;
                functionObjectLibs ( "libreport.so" );
                outputFileFormat tsv;
            }
            FF3
            {
                type            forces;
                regions         ( dir3 );
                instance        dir3;
                functionObjectLibs ( "libforces.so" );
                rhoName         rho;
                executeControl  onEnd;
                writeControl    onEnd;
                log             true;
                CofR            ( 0 0 0 );
                patches         ( main annex );
            }
        }
    }
}


// ************************************************************************* //
