/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields yes;
        resetBoundaryFields yes;
        resetSystemDicts yes;
        resetConstDicts yes;
        resetBoundaryMesh yes;
        deleteUnusedFields yes;
    }
    regionGroups    1 ( fluid 1 ( region0 ) );
    system
    {
        controlDict
        {
            application     helyxSolve;
            stopAt          endTime;
            endTime         1000;
            deltaT          1;
            writeControl    timeStep;
            writeInterval   100;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state           ( steady ras );
        turbulenceModel realizableKE;
        materials       ( air );
        system
        {
            fvSolution
            {
                solvers
                {
                    p
                    {
                        nCellsInCoarsestLevel 10; // mesh is too small
                    }
                }
                SIMPLE
                {
                    nNonOrthogonalCorrectors 0;
                    residualControl
                    {
                        p               1e-2;
                        U               1e-3;
                        "(k|epsilon)"   1e-3;
                    }
                }
            }
        }
        materialProperties
        {
            air
            {
                muModelCoeffs
                {
                    mu 1.205e-6;
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type fixedValue;
                    value uniform (1 0 0);
                }
            }
            p
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
            k
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 1;
                }
            }
            epsilon
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 1;
                }
            }
        }
        boundaryConditions
        {
            inlet
            {
                U
                {
                    type            codedFixedValue;
                    name            swirl;
                    code
                    #{
                        const vector axis(1, 0, 0);

                        vectorField v(2.0*this->patch().Cf() ^ axis);
                        v.replace(vector::X, 1.0);
                        forceAssign(v);
                    #};
                    value           uniform (1 0 0);
                }
                epsilon
                {
                    type            turbulentMixingLengthDissipationRateInlet;
                    mixingLength    0.5;
                    value           uniform 1;
                }
                k
                {
                    type            turbulentIntensityKineticEnergyInlet;
                    intensity       0.05;
                    value           uniform 1;
                }
            }
            outlet
            {
                U
                {
                    type            inletOutlet;
                    inletValue      uniform (1 0 0);
                    value           uniform (1 0 0);
                }
                p
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                k
                {
                    type            inletOutlet;
                    inletValue      uniform 1;
                    value           uniform 1;
                }
                epsilon
                {
                    type            inletOutlet;
                    inletValue      uniform 1;
                    value           uniform 1;
                }
            }
        }
    }
}


// ************************************************************************* //
