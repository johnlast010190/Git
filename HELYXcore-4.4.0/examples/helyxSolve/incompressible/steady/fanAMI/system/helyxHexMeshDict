/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      helyxHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;

snap true;

addLayers true;

autoBlockMesh false;

blockData ( 0.01 0 );

crackDetection false;

crackTol 0.05;

allowTopoChanges true;

finalDecomposition ptscotch;

meshMode quality;

geometry
{
    frame.stl
    {
        type triSurfaceMesh;
        name frame;
        appendRegionName false;
    }
    fan.stl
    {
        type triSurfaceMesh;
        name fan;
        appendRegionName false;
    }
}

castellatedMeshControls
{
    features ( );
    refinementSurfaces
    {
        frame
        {
            level ( 3 4 );
        }
        fan
        {
            level ( 3 4 );
            faceType boundary;
            faceZone fan;
            cellZoneInside inside;
            baffleChecks true;
            allowFreeStandingZoneFaces true;
        }
    }
    refinementRegions
    {
        frame
        {
            mode distance;
            levels ( ( 0.3 1 ) );
        }
        fan
        {
            mode distance;
            levels ( ( 0.3 1 ) );
        }
    }
    maxLocalCells 250000000;
    maxGlobalCells 1000000000;
    minRefinementCells 100;
    maxLoadUnbalance 0.1;
    nCellsBetweenLevels 2;
    resolveFeatureAngle -60.0;
    featureRefineAngle 20.0;
    refineSurfaceBoundary false;
    minBaffleAngle -60.0;
    allowFreeStandingZoneFaces false;
    balanceThenRefine true;
    nGapRefinements 0;
    minZoneRegionSize 1;
    additionalInsideCheck false;
    moveCentroidsTol -1.0;
    interfaceRefine true;
    splitCells false;
    wrapper
    {
        wrap false;
        volSources true;
        volDistance 1.0;
        meshInMM false;
        maxIter 200;
        writeFields false;
        invert false;
        sigma 3.0;
        cutoff 1000.0;
    }
    locationsInMesh ( ( ( 1.5 0.0 -0.5 ) none ) );
    interZonesBaffle false;
    singleCellGapClosure false;
}

snapControls
{
    featureEdges
    {
    }
    nOuterIter 1;
    nPreFeatureIter 0;
    nSolveIter 10;
    nFeatureIter 60;
    globalFeatureEdges true;
    globalRegionSnap false;
    nSmoothPatch 2;
    tolerance 4.0;
    nRelaxIter 5;
    zoneFeatureSnapping true;
    directFeatureSnapping true;
    geometryFeatureLines true;
    snapSurfBoundary true;
    collapseTol 0.25;
    enlargeStencil true;
    smoothSnappedSurface true;
    featureSnapChecks true;
    concaveTol 0.3;
    nSliverSmooths 10;
    mergeBoundaryFaces true;
    averageSurfaceNormal true;
    repatchOverlapping false;
}

addLayersControls
{
    layers
    {
        ffminx
        {
            nSurfaceLayers 1;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        ffmaxx
        {
            nSurfaceLayers 0;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        ffminy
        {
            nSurfaceLayers 0;
            grownUp true;
        }
        ffmaxy
        {
            nSurfaceLayers 0;
            grownUp true;
        }
        ffminz
        {
            nSurfaceLayers 0;
            grownUp true;
        }
        ffmaxz
        {
            nSurfaceLayers 0;
            grownUp true;
        }
        frame
        {
            nSurfaceLayers 1;
            finalLayerThickness 0.4;
            expansionRatio 1.25;
            grownUp automatic;
        }
        fan
        {
            nSurfaceLayers 0;
            grownUp true;
        }
        fan_slave
        {
            nSurfaceLayers 0;
            grownUp true;
        }
    }
    relativeSizes true;
    expansionRatio 1.25;
    finalLayerThickness 0.4;
    minThickness 0.2;
    featureAngleMerge 45;
    featureAngleTerminate 80.0;
    nRelaxIter 5;
    maxFaceThicknessRatio 2.0;
    maxThicknessToMedialRatio 0.3;
    minMedialAxisAngle 90;
    maxLayerIter 30;
    growConvexEdge true;
    growConcaveEdge true;
    growUpPatches true;
    rebalance false;
    layerRecovery 1;
    nSmoothThickness 10;
    nSmoothSurfaceNormals 6;
    nSmoothNormals 3;
    maxProjectionDistance 10000.0;
    maxCellDistortion 50.0;
    medialRatioExp 1;
    growZoneLayers false;
    writeVTK true;
    fixedFCH false;
    dualConcaveCollapse 0;
    dualZoneLayersScaling 1.0;
    dualLayerInterfaceWeights 0.5;
    dualMaxOrtho 180;
    dualReSnapZones false;
    extrudeBlend true;
}

meshQualityControls
{
    maxNonOrtho 70.0;
    maxBoundarySkewness 20;
    maxInternalSkewness 6;
    maxConcave 80.0;
    minFlatness 0.5;
    minVol 1.0E-14;
    minTetQuality -1.0E30;
    minArea 1.0E-13;
    minTwist 0.05;
    minDeterminant 1.0E-4;
    minFaceWeight 0.08;
    minVolRatio 0.02;
    minTriangleTwist -0.99;
    errorReduction 0.75;
    nSmoothScale 10;
    minVolCollapseRatio -1.0;
    faceFaceCells false;
    minSnapRelativeVolume -1;
    smoothAlignedEdges false;
    minSnapRelativeTetVolume -1;
    maxGaussGreenCentroid -1;
    nVolSmoothIter 8;
    maxCellAspectRatio -1.0;
    maxFaceCentreNonOrtho 180.0;
    minEdgeLength -1.0;
}

debug 0;

mergeTolerance 1.0E-6;

meshAlgorithm standard;

meshOptimization
{
    type cfMeshOptimize;
    cfMeshOptimizeCoeffs
    {
        qualityThreshold 0.0;
        numLaplaceIterations 0;
        maxNumGlobalIterations 10;
        maxNumIterations 50;
        maxNumSurfaceIterations 2;
        relaxedCheck false;
    }
}

cellRemoval
{
    checks ( );
    patch oldInternalFaces;
}


// ************************************************************************* //
