/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields true;
        resetBoundaryFields true;
        resetSystemDicts true;
        resetConstDicts true;
        resetBoundaryMesh true;
        deleteUnusedFields true;
        reuseExistingDicts false;
        strictPatchNameChecking false;
    }
    system
    {
        controlDict
        {
            application helyxSolve;
            startFrom latestTime;
            startTime 0;
            stopAt endTime;
            endTime 5000.0;
            deltaT 1.0;
            writeControl timeStep;
            writeInterval 1000;
            purgeWrite 2;
            writeFormat ascii;
            writePrecision 10;
            writeEndTime true;
            timeFormat general;
            timePrecision 6;
            runTimeModifiable yes;
            adjustTimeStep false;
        }
    }
    functions
    {
        SE
        {
            type sets;
            regions ( region0 );
            fields ( U k nut epsilon );
            interpolationScheme cellPoint;
            setFormat tsv;
            sets
            (
                sets0
                {
                    type uniform;
                    axis distance;
                    start ( 2500.0 50.0 0.0 );
                    end ( 2500.0 50.0 500.0 );
                    nPoints 100;
                }
                sets1
                {
                    type uniform;
                    axis distance;
                    start ( 4000.0 50.0 0.0 );
                    end ( 4000.0 50.0 500.0 );
                    nPoints 100;
                }
            );
            writeControl outputTimeAndEnd;
            writeInterval 1;
            executeControl outputTimeAndEnd;
            executeInterval 1;
            functionObjectLibs ("libsampling.so");
        }
    }
}

regions
{
    region0
    {
        state (steady ras);
        boundaryMesh
        {
            inlet { type inlet; }
            ground { type wall; }
            top { type patch; }
            sides { type symmetry; }
            outlet { type outlet; }
        }
        turbulenceModel kEpsilon;
        materials (air);
        materialProperties
        {
            air
            {
                materialName air;
                materialType fluid;
                molWeight 28.96;
                energy sensibleEnthalpy;
                equationOfState rhoConst;
                equationOfStateCoeffs
                {
                    rho 1.177;
                }
                muModel scalarFunction1;
                muModelCoeffs
                {
                    mu constant 1.846E-5;
                }
                thermodynamics hConst;
                thermodynamicsCoeffs
                {
                    Hf 0.0;
                    Cp 1004.9;
                }
                kappaModel scalarFunction1;
                kappaModelCoeffs
                {
                    kappa 0.0262;
                }
                buoyancyModelCoeffs
                {
                    beta 0.0034;
                }
                referenceFields
                {
                    p [1 -1 -2 0 0 0 0] 101325.0;
                    TConst [0 0 0 1 0 0 0] 300.0;
                }
            }
        }
        constant
        {
            g
            {
                value ( 0.0 0.0 -9.81 );
                dimensions [0  1 -2  0 0 0 0];
            }
            turbulenceProperties
            {
                simulationType RAS;
                RAS
                {
                    RASModel kEpsilon;
                    turbulence on;
                    printCoeffs on;
                    kEpsilonCoeffs
                    {
                        sigmaEps 1.111;
                        maxTurbViscosityRatio 1e16;
                    }
                }
            }
        }
        system
        {
            fvSchemes
            {
                ddtSchemes
                {
                    default steadyState;
                }
                gradSchemes
                {
                    default cellLimited Gauss linear 1.0;
                    turbulence cellLimited Gauss linear 1.0;
                    gradU cellLimited Gauss linear 1.0;
                    grad(p) cellLimited Gauss linear 1.0;
                    grad(k) cellLimited Gauss linear 1.0;
                    grad(epsilon) cellLimited Gauss linear 1.0;
                }
                divSchemes
                {
                    div(phi,U) bounded Gauss linearUpwindV gradU;
                    default none;
                    div(R) Gauss linear;
                    div((rho*R)) Gauss linear;
                    div(nonlinearStress) Gauss linear;
                    div((muEff*dev2(grad(U).T()))) Gauss linear;
                    div((nuEff*dev2(T(grad(U))))) Gauss linear;
                    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
                    div((nu*dev2(T(grad(U))))) Gauss linear;
                    div(((rho*(mu|rho))*dev2(T(grad(U))))) Gauss linear;
                    div(phi,symm(grad(U))) bounded Gauss linearUpwind turbulence;
                    div(phi,k) bounded Gauss limitedLinear 1.000000;
                    div(phi,epsilon) bounded Gauss limitedLinear 1.000000;
                }
                laplacianSchemes
                {
                    laplacian((rho*nuEff),U) Gauss linear limited 0.333;
                    laplacian(rhorAUf,p) Gauss linear limited 0.333;
                    default Gauss linear limited 0.333;
                    laplacian((rho*DepsilonEff),omega) Gauss linear limited 0.333;
                    laplacian((rho*DkEff),k) Gauss linear limited 0.333;
                }
                interpolationSchemes
                {
                    default linear;
                    interpolate(HbyA) linear;
                }
                snGradSchemes
                {
                    default limited 0.333;
                }
                wallDist
                {
                    method meshWave;
                }
            }
            fvSolution
            {
                solvers
                {
                    p
                    {
                        solver GAMG;
                        agglomerator faceAreaPair;
                        mergeLevels 1;
                        cacheAgglomeration true;
                        nCellsInCoarsestLevel 200;
                        smoother symGaussSeidel;
                        minIter 1;
                        scaleCorrection true;
                        tolerance 1e-10;
                        relTol 0.01;
                    }
                    U
                    {
                        solver smoothSolver;
                        smoother symGaussSeidel;
                        minIter 1;
                        tolerance 1e-6;
                        relTol 0.1;
                        nSweeps 2;
                    }
                    k
                    {
                        solver smoothSolver;
                        smoother symGaussSeidel;
                        minIter 1;
                        tolerance 1e-06;
                        relTol 0.1;
                    }
                    epsilon
                    {
                        solver smoothSolver;
                        smoother symGaussSeidel;
                        minIter 1;
                        tolerance 1e-06;
                        relTol 0.1;
                    }
                }
                relaxationFactors
                {
                    fields
                    {
                        p 1.0;
                        rho 0.05;
                    }
                    equations
                    {
                        U 0.7;
                        k 0.7;
                        epsilon 0.7;
                    }
                }
                SIMPLE
                {
                    residualControl
                    {
                        ".*" 1.0E-5;
                    }
                    modifiedMomentumInterp true;
                    consistent true;
                }
                cache { grad(U); }
            }
        }
        fields
        {
            U { initialisation { type fixedValue; value uniform ( 10.0 0.0 0.0 ); } }
            p { initialisation { type fixedValue; value uniform 0.0; } }
            k { initialisation { type boundaryValue; patch inlet; } }
            epsilon { initialisation { type boundaryValue; patch inlet; } }
        }
        boundaryConditions
        {
            inlet
            {
                U
                {
                    type windProfileDirectionVelocity;
                    value uniform ( 0.0 0.0 0.0 );
                    profile RHWindProfile;
                    outOfBounds clamp;
                    distanceType z;
                    origin ( 0.0 0.0 0.0 );
                    xscale constant 1.0;
                    yscale constant 1.0;
                    xoffset 0.0;
                    yoffset constant 0.0;
                    windDirection constant 90.0;
                    profileCoeffs
                    {
                        Cmu 0.09;
                        Uref 10.0;
                        kappa 0.41;
                        Href 6.0;
                        z0 0.01;
                    }
                    normalDirection true;
                }
                p
                {
                    type fixedFluxPressure;
                    value uniform 0.0;
                }
                k
                {
                    type interpolatedFixedValue;
                    value uniform 0.01;
                    profile RHWindKineticEnergyProfile;
                    outOfBounds clamp;
                    distanceType z;
                    origin ( 0.0 0.0 0.0 );
                    xscale constant 1.0;
                    yscale constant 1.0;
                    xoffset 0.0;
                    yoffset constant 0.0;
                    profileCoeffs
                    {
                        Cmu 0.09;
                        Uref 10.0;
                        kappa 0.41;
                        Href 6.0;
                        z0 0.01;
                    }
                }
                epsilon
                {
                    type interpolatedFixedValue;
                    value uniform 0.01;
                    profile RHWindDissipationRateProfile;
                    outOfBounds clamp;
                    distanceType z;
                    origin ( 0.0 0.0 0.0 );
                    xscale constant 1.0;
                    yscale constant 1.0;
                    xoffset 0.0;
                    yoffset constant 0.0;
                    profileCoeffs
                    {
                        Cmu 0.09;
                        Uref 10.0;
                        kappa 0.41;
                        Href 6.0;
                        z0 0.01;
                    }
                }
                nut
                {
                    type calculated;
                    value uniform 0.0;
                }
            }
            ground
            {
                U
                {
                    type wallVelocity;
                    value uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type fixedFluxPressure;
                    value uniform 0.0;
                }
                k
                {
                    type kqRWallFunction;
                    value uniform 1e-20;
                }
                epsilon
                {
                    type atmEpsilonWallFunction;
                    value uniform 1;
                    roughnessHeight uniform 0.01;
                }
                nut
                {
                    type nutkAtmRoughWallFunction;
                    value uniform 0.0;
                    roughnessHeight 0.01;
                }
            }
            top
            {
                U
                {
                    type fixedShearStress;
                    tau (0.390796574 0 0);
                    value uniform (0 0 0);
                }
                p
                {
                    type fixedFluxPressure;
                    value uniform 0.0;
                }
                k
                {
                    type zeroGradient;
                }
                epsilon
                {
                    type zeroGradient;
                }
                nut
                {
                    type calculated;
                    value uniform 0.0;
                }
            }
            outlet
            {
                U
                {
                    type inletOutlet;
                    inletValue uniform (0 0 0);
                    value uniform (0 0 0);
                }
                p
                {
                    type fixedValue;
                    value uniform 0.0;
                }
                k
                {
                    type inletOutlet;
                    inletValue uniform 1.3686;
                    value uniform 1.3686;
                }
                epsilon
                {
                    type inletOutlet;
                    inletValue uniform 0.1;
                    value uniform 0.1;
                }
                nut
                {
                    type calculated;
                    value uniform 0.0;
                }
            }
        }
    }
}


// ************************************************************************* //
