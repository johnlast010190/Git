/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields true;
        resetBoundaryFields true;
        resetSystemDicts true;
        resetConstDicts true;
        resetBoundaryMesh true;
        deleteUnusedFields true;
        reuseExistingDicts false;
        strictPatchNameChecking false;
    }
    system
    {
        controlDict
        {
            application helyxSolve;
            startFrom startTime;
            startTime 0;
            stopAt endTime;
            endTime 1000;
            deltaT 1;
            writeControl timeStep;
            writeInterval 50;
            writeFormat ascii;
            writePrecision 8;
            timeFormat general;
            timePrecision 6;
            runTimeModifiable yes;
            adjustTimeStep false;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state (steady ras);
        boundaryMesh
        {
            inlet
            {
                type patch;
            }
            outlet
            {
                type patch;
            }
            slipWall
            {
                type slip;
            }
        }
        turbulenceModel kOmegaSST;
        materials (water);
        materialProperties
        {
            water
            {
                equationOfState rhoConst;
                equationOfStateCoeffs
                {
                    rho 1000;
                }
            }
        }
        system
        {
            fvOptions
            {
                disk
                {
                    type            rotorDisk;

                    selectionMode   cellZone;
                    cellZone        rotatingZone;

                    fields          (U);    // Names of fields on which to apply source
                    nBlades         3;      // Number of blades
                    tipEffect       0.96;   // Normalised radius above which lift = 0

                    inletFlowType   local;  // Inlet flow type specification
                    inletVelocity   (0 1 0);

                    geometryMode    specified;

                    origin          (0 0 0);
                    axis            (0 1 0);

                    refDirection    (0 0 1);  // Reference direction
                                              // - used as reference for psi angle
                    rpm             1000;
                    //pointAbove    (0 0 0.25);

                    trimModel       fixedTrim;  // fixed || targetForce

                    fixedTrimCoeffs
                    {
                        theta0         0;
                        theta1c        0;
                        theta1s        0;
                    }

                    flapCoeffs
                    {
                        beta0           0;  // Coning angle [deg]
                        beta1c          0;  // Lateral flapping coeff (cos coeff)
                        beta2s          0;  // Longitudinal flapping coeff (sin coeff)
                    }

                    blade
                    {
                        data
                        (
                            (profile1 (0.1 -6 0.02))
                            (profile1 (0.25 -6 0.02))
                        );
                    }

                    profiles
                    {
                        profile1
                        {
                            type lookup;
                            data
                            (
                                (-90 0.21 1.45)
                                (-18 0.21 1.45)
                                (-16 0.165 1.3)
                                (-14 0.125 1.1)
                                (-12 0.092 0.95)
                                (-10 0.07 0.8)
                                (-8 0.05 0.64)
                                (-6 0.04 0.5)
                                (-4 0.028 0.32)
                                (-2 0.022 0.18)
                                (0 0.02 0)
                                (2 0.022 0.18)
                                (4 0.028 0.32)
                                (6 0.04 0.5)
                                (8 0.05 0.64)
                                (10 0.07 0.8)
                                (12 0.092 0.95)
                                (14 0.125 1.1)
                                (16 0.165 1.3)
                                (18 0.21 1.45)
                                (90 0.21 1.45)
                            );
                        }
                    }
                }
            }
            fvSolution
            {
                solvers
                {
                    p
                    {
                        solver          GAMG;
                        smoother        GaussSeidel;
                        tolerance       1e-6;
                        relTol          0.1;
                    }
                    U
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        tolerance       1e-6;
                        relTol          0.1;
                    }
                    k
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        tolerance       1e-6;
                        relTol          0.1;
                    }
                    omega
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        tolerance       1e-6;
                        relTol          0.1;
                    }
                }
                SIMPLE
                {
                    nNonOrthogonalCorrectors 0;
                    consistent      yes;

                    residualControl
                    {
                        p               1e-3;
                        U               1e-4;
                        // possibly check turbulence fields
                        "(k|omega)" 1e-3;
                    }
                }
                relaxationFactors
                {
                    fields
                    {
                        p               1;
                    }
                    equations
                    {
                        U               0.95;
                        k               0.95;
                        omega           0.95;
                    }
                }
            }
            fvSchemes
            {
                gradSchemes
                {
                    default         Gauss linear;

                    limited         cellLimited Gauss linear 1;
                    grad(U)         $limited;
                    grad(k)         $limited;
                    grad(omega)     $limited;
                }
                divSchemes
                {
                    default         none;

                    div(phi,U)      bounded Gauss linearUpwind unlimited;

                    turbulence      bounded Gauss linearUpwind limited;
                    div(phi,k)      $turbulence;
                    div(phi,omega)  $turbulence;
                    div((nuEff*dev(T(grad(U))))) Gauss linear;
                    div((nuEff*dev2(T(grad(U))))) Gauss linear;
                }
                laplacianSchemes
                {
                    default         Gauss linear corrected;
                }
                interpolationSchemes
                {
                    default         linear;
                }
                snGradSchemes
                {
                    default         corrected;
                }
                wallDist
                {
                    method meshWave;
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type fixedValue;
                    value uniform (0 1 0);
                }
            }
            k
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0.02;
                }
            }
            omega
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 10.0;
                }
            }
            p
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
        }
        boundaryConditions
        {
            inlet
            {
                U
                {
                    type            fixedValue;
                    value           uniform (0 1 0);
                }
                p
                {
                    type            zeroGradient;
                }
                k
                {
                    type            fixedValue;
                    value           uniform 0.02;
                }
                omega
                {
                    type            fixedValue;
                    value           uniform 10.0;
                }
            }
            outlet
            {
                U
                {
                    type            pressureInletOutletVelocity;
                    value           uniform (0 1 0);
                }
                p
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                k
                {
                    type            inletOutlet;
                    inletValue      uniform 0.02;
                    value           uniform 0.02;
                }
                omega
                {
                    type            inletOutlet;
                    inletValue      uniform 10.0;
                    value           uniform 10.0;
                }
            }
            slipWall
            {
                U
                {
                    type            slip;
                }
                p
                {
                    type            slip;
                }
                k
                {
                    type            slip;
                }
                omega
                {
                    type            slip;
                }
            }
        }
    }
}


// ************************************************************************* //
