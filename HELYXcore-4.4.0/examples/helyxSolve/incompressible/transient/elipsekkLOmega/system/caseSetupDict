/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields true;
        resetBoundaryFields true;
        resetSystemDicts true;
        resetConstDicts true;
        resetBoundaryMesh true;
        deleteUnusedFields true;
        reuseExistingDicts false;
        strictPatchNameChecking false;
    }
    system
    {
        controlDict
        {
            application helyxSolve;
            startFrom latestTime;
            startTime 0;
            stopAt endTime;
            endTime 1;
            deltaT 0.001;
            writeControl adjustableRunTime;
            writeInterval 0.01;
            purgeWrite 0;
            writeFormat binary;
            writePrecision 6;
            writeCompression uncompressed;
            timeFormat general;
            timePrecision 6;
            runTimeModifiable yes;
            adjustTimeStep yes;
            maxCo 0.2;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state (transient ras);
        turbulenceModel kkLOmega;
        materials (air);
        materialProperties
        {
           referenceFields
           {
              p               [ 1 -1 -2 0 0 0 0 ] 100000;
           }
        }
        system
        {
            fvSchemes
            {
                ddtSchemes
                {
                    default         Euler;
                }
                gradSchemes
                {
                    default         Gauss linear;
                }
                divSchemes
                {
                    default         none;
                    div(phi,U)      Gauss linearUpwindV grad(U);
                    div(phi,kl)     Gauss limitedLinear 1;
                    div(phi,kt)     Gauss limitedLinear 1;
                    div(phi,omega)  Gauss limitedLinear 1;
                    div((nuEff*dev2(T(grad(U))))) Gauss linear;
                }
                laplacianSchemes
                {
                    default         Gauss linear corrected;
                }
                interpolationSchemes
                {
                    default         linear;
                }
                snGradSchemes
                {
                    default         corrected;
                }
            }
            fvSolution
            {
                PIMPLE
                {
                    nOuterCorrectors 1;
                    nCorrectors      2;
                    nNonOrthogonalCorrectors 0;
                }
                relaxationFactors
                {
                    equations
                    {
                        U           1;
                    }
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type fixedValue;
                    value uniform ( 3.1 0.0 0.0 );
                }
            }
            p
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
            kl
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
            kt
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
            omega
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 1e-5;
                }
            }
        }
        boundaryConditions
        {
            inlet
            {
                U
                {
                    type            fixedValue;
                    value           uniform (3.1 0 0);
                }
                p
                {
                    type            zeroGradient;
                }
                kl
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                kt
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                omega
                {
                    type            fixedValue;
                    value           uniform 1e-5;
                }
            }
            outlet
            {
                U
                {
                    type            inletOutlet;
                    inletValue      uniform (0 0 0);
                    value           uniform (0 0 0);
                }
                p
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                kl
                {
                    type            inletOutlet;
                    inletValue      uniform 0;
                    value           uniform 0;
                }
                kt
                {
                    type            inletOutlet;
                    inletValue      uniform 0;
                    value           uniform 0;
                }
                omega
                {
                    type            inletOutlet;
                    inletValue      uniform 1e-5;
                    value           uniform 1e-5;
                }
            }
            up
            {
                U
                {
                    type            symmetry;
                }
                p
                {
                    type            symmetry;
                }
                kl
                {
                    type            symmetry;
                }
                kt
                {
                    type            symmetry;
                }
                omega
                {
                    type            symmetry;
                }
            }
            hole
            {
                U
                {
                    type noSlip;
                }
                p
                {
                    type zeroGradient;
                }
                kl
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                kt
                {
                    type            fixedValue;
                    value           uniform 0;
                }
                omega
                {
                    type zeroGradient;
                }
            }
            frontAndBack
            {
                U
                {
                    type empty;
                }
                p
                {
                    type empty;
                }
                kl
                {
                    type empty;
                }
                kt
                {
                    type empty;
                }
                omega
                {
                    type empty;
                }
            }
        }
    }
}


// ************************************************************************* //
