/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields  true;
        resetBoundaryFields  true;
        resetSystemDicts     true;
        resetConstDicts      true;
        resetBoundaryMesh    false;
        deleteUnusedFields   true;
    }
    system
    {
        controlDict
        {
            application    helyxSolve;
            startFrom      startTime;
            startTime      0;
            stopAt         endTime;
            endTime        25;
            deltaT         5e-3;
            writeControl   runTime;
            writeInterval  1;
            writePrecision 8;
        }
    }
    functions
    {
        #includeFunc residuals
        #includeFunc singleGraph
        #includeFunc probes

        VR
        {
            type             volumeReport;
            fields           ( U p sigma );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
    }
}

regions
{
    region0
    {
        state ( transient ras );
        turbulenceModel laminar;
        materials (air);
        materialProperties
        {
            air
            {
                equationOfStateCoeffs
                {
                    rho             1;
                }
                muModelCoeffs
                {
                    mu              0.1;
                }
            }
        }
        system
        {
            fvSchemes
            {
                gradSchemes
                {
                    default                     Gauss linear;
                }
                divSchemes
                {
                    div(phi,sigma)              Gauss vanAlbada;
                    div((rho*sigma))            Gauss linear;
                    div(((rho*(mu|rho))*dev2(T(grad(U))))) Gauss linear;
                    div(((rho*nuM)*grad(U)))    Gauss linear;
                }
            }
            fvSolution
            {
                solvers
                {
                    p
                    {
                        solver                GAMG;
                        nCellsInCoarsestLevel 10;
                        smoother              DIC;
                        tolerance             1e-6;
                        relTol                0.05;
                    }
                    pFinal
                    {
                        $p;
                        relTol          0;
                    }
                    sigma
                    {
                        solver          smoothSolver;
                        smoother        symGaussSeidel;
                        tolerance       1e-6;
                        relTol          0.1;
                    }
                    sigmaFinal
                    {
                        $sigma;
                        relTol          0;
                    }
                }
                relaxationFactors
                {
                    fields
                    {
                        p               1;
                    }
                    equations
                    {
                        U               1;
                    }
                }
                PIMPLE
                {
                    momentumPredictor   false;
                    nOuterCorrectors    15;
                    nCorrectors         3;
                }
            }
            fvOptions
            {
                momentumSource
                {
                    type      vectorSemiImplicitSource;

                    timeStart       0.0;
                    duration        1000;
                    selectionMode   all;

                    volumeMode      specific;
                    injectionRateSuSp
                    {
                        U    ((5 0 0) 0);
                    }
                }
            }
        }
        constant
        {
            turbulenceProperties
            {
                laminar
                {
                    laminarModel        Maxwell;
                    MaxwellCoeffs
                    {
                        nuM             1;
                        lambda          5;
                    }
                    printCoeffs         on;
                }
            }
        }
        fieldMaps
        {
            sigma    R;
        }
        fields
        {
            U
            {
                initialisation
                {
                    type fixedValue;
                    value uniform (0 0 0);
                }
            }
            p
            {
                initialisation
                {
                    type fixedValue;
                    value uniform 0;
                }
            }
            sigma
            {
                initialisation
                {
                    type fixedValue;
                    value uniform (0 0 0 0 0 0);
                }
            }
        }
        boundaryConditions
        {
            wall
            {
                sigma
                {
                    type            zeroGradient;
                }
            }
        }
    }
}


// ************************************************************************* //
