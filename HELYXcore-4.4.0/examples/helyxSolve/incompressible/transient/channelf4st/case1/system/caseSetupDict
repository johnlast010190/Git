/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields true;
        resetBoundaryFields true;
        resetSystemDicts true;
        resetConstDicts true;
        resetBoundaryMesh true;
        deleteUnusedFields true;
        reuseExistingDicts false;
        strictPatchNameChecking false;
    }
    system
    {
        controlDict
        {
            startFrom       latestTime;
            endTime         15.0;
            deltaT          0.025;
            writeInterval   2.5;
            adjustTimeStep  no;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p k omega );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
        sets
        {
            type            sets;
            functionObjectLibs ( "libsampling.so" );
            writeControl    timeStep;
            writeInterval   1;
            timeStart       10;
            timeEnd         15;
            interpolationScheme cell;
            verbose         true;
            enabled         true;
            region          region0;
            fields          ( U k omega );
            setFormat       f4st;
            sets
            (
                patchOutlet
                {
                    type    patchSeed;
                    patches ( outlet );
                    axis xyz;
                    maxPoints 10000;
                }
            );
        }
    }
}

regions
{
    region0
    {
        state (transient ras);
        boundaryMesh
        {
            ffminx
            {
                type wall;
            }
            ffmaxx
            {
                type wall;
            }
            ffminy
            {
                type wall;
            }
            ffmaxy
            {
                type wall;
            }
            outlet
            {
                type outlet;
            }
            inlet
            {
                type inlet;
            }
        }
        turbulenceModel kOmegaSST;
        materials (air);
        materialProperties
        {
            air
            {
                materialName air;
                transportModel Newtonian;
                NewtonianCoeffs
                {
                }
                rho [1 -3 0 0 0 0 0] 1.205;
                mu [1 -1 -1 0 0 0 0] 1.9137E-5;
                nu [0 2 -1 0 0 0 0] 1.5881327800829875E-5;
                Cp [0 2 -2 -1 0 0 0] 1006.0;
                Prt [0 0 0 0 0 0 0] 0.85;
                lambda [1 1 -3 -1 0 0 0] 0.024;
                pRef [1 -1 -2 0 0 0 0] 101325.0;
                TRef [0 0 0 1 0 0 0] 300.0;
                Beta [0 0 0 -1 0 0 0] 0.00333;
            }
        }
        system
        {
            fvSolution
            {
                PIMPLE
                {
                    nCorrectors      3;
                    nOuterCorrectors 2;
                    turbOnFinalIterOnly true;
                }
            }
        }
        fields
        {
            U
            {
                initialisation
                {
                    type potentialFlow;
                    initialiseUBCs true;
                }
            }
            p
            {
                initialisation
                {
                    type potentialFlow;
                }
            }
            k
            {
                initialisation
                {
                    type Prandtl;
                }
            }
            omega
            {
                initialisation
                {
                    type Prandtl;
                }
            }
        }
        boundaryConditions
        {
            ffminx
            {
                U
                {
                    type fixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type zeroGradient;
                }
                nut
                {
                    type nutUSpaldingWallFunction;
                    value uniform 0.001;
                }
                k
                {
                    type kqRWallFunction;
                    value uniform 1e-20;
                }
                omega
                {
                    type omegaWallFunction;
                    value uniform 1;
                }
            }
            ffmaxx
            {
                U
                {
                    type fixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type zeroGradient;
                }
                nut
                {
                    type nutUSpaldingWallFunction;
                    value uniform 0.001;
                }
                k
                {
                    type kqRWallFunction;
                    value uniform 1e-20;
                }
                omega
                {
                    type omegaWallFunction;
                    value uniform 1;
                }
            }
            ffminy
            {
                U
                {
                    type fixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type zeroGradient;
                }
                nut
                {
                    type nutUSpaldingWallFunction;
                    value uniform 0.001;
                }
                k
                {
                    type kqRWallFunction;
                    value uniform 1e-20;
                }
                omega
                {
                    type omegaWallFunction;
                    value uniform 1;
                }
            }
            ffmaxy
            {
                U
                {
                    type fixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type zeroGradient;
                }
                nut
                {
                    type nutUSpaldingWallFunction;
                    value uniform 0.001;
                }
                k
                {
                    type kqRWallFunction;
                    value uniform 1e-20;
                }
                omega
                {
                    type omegaWallFunction;
                    value uniform 1;
                }
            }
            outlet
            {
                U
                {
                    type inletOutlet;
                    value uniform ( 0.0 0.0 0.0 );
                    inletValue uniform ( 0.0 0.0 0.0 );
                }
                p
                {
                    type fixedValue;
                    value uniform 0.0;
                }
                nut
                {
                    type calculated;
                    value uniform 0.0;
                }
                k
                {
                    type turbulentIntensityKineticEnergyInlet;
                    intensity 0.05;
                    value uniform 0.1;
                }
                omega
                {
                    type inletOutlet;
                    inletValue uniform 0.01;
                    k k;
                    value uniform 0.01;
                }
            }
            inlet
            {
                U
                {
                    type surfaceNormalFixedValue;
                    value uniform ( 0.0 0.0 0.0 );
                    refValue uniform -3.0;
                    profile constant -3.0;
                }
                p
                {
                    type zeroGradient;
                }
                nut
                {
                    type calculated;
                    value uniform 0.0;
                }
                k
                {
                    type turbulentIntensityKineticEnergyInlet;
                    value uniform 0.1;
                    intensity 0.05;
                }
                omega
                {
                    type turbulentMixingLengthFrequencyInlet;
                    value uniform 0.01;
                    mixingLength 0.01;
                }
            }
        }
    }
}


// ************************************************************************* //
