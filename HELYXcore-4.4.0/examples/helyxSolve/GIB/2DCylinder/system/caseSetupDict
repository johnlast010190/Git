/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      caseSetupDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

global
{
    modificationSwitches
    {
        resetInternalFields yes;
        resetBoundaryFields yes;
        resetSystemDicts yes;
        resetConstDicts yes;
        resetBoundaryMesh yes;
        deleteUnusedFields no;
    }
    regionGroups    1 ( fluid 1 ( region0 ) );
    system
    {
        controlDict
        {
            stopAt          endTime;
            writeControl    adjustableRunTime;
            writeInterval   2;
            deltaT          0.1;
            endTime         50;
        }
    }
    functions
    {
        VR
        {
            type             volumeReport;
            fields           ( U p );
            executeControl   onEnd;
            writeControl     onEnd;
            outputFileFormat tsv;
        }
        FR
        {
            type                forces;
            functionObjectLibs  ("libforces.so");
            writeControl        timeStep;
            writeInterval       1;
            patches             ( ib1 );
            p                   p;
            U                   U;
            log                 true;
            CofR                (0.25 0.007 0.125);
            outputFileFormat    tsv;
        }
        SR_inout
        {
            type surfaceReport;
            functionObjectLibs  ("libreport.so");
            outputFileFormat    tsv;
            surfaces
            (
                { type patch; name Inlet; }
                { type patch; name Outlet; }
            );
            constraints ();
            logToFile true;
            fields (U);
        }
        SR_in
        {
            type surfaceReport;
            functionObjectLibs  ("libreport.so");
            outputFileFormat    tsv;
            surfaces ( { type patch; name Inlet; } );
            constraints ();
            logToFile true;
            fields (U);
        }
    }
}

regions
{
    region0
    {
        state           ( transient ras dynamic );
        turbulenceModel laminar;
        materials       ( air );
        materialProperties
        {
            air
            {
                muModelCoeffs { mu 1.205e-2; }
            }
        }
        constant
        {
            dynamicMeshDict
            {
                GIBChanger
                {
                    type            solidBody;
                    libs            ("libfvMeshGIBChangers.so");

                    solidBodyCoeffs
                    {
                        triSurfaceName cylinder.stl;
                        region0Patch (Outlet);
                        debug true;
                        motionFunctions
                        {
                            referenceFrame oscillatingFrame;
                        }
                    }
                }
            }
        }
        system
        {
            meshObjects
            {
                oscillatingFrame
                {
                    type dynamicMotionCoordinateFrame;
                    motionFunction
                    {
                        type      oscillatingLinearMotion;
                        amplitude (0 1 0);
                        omega     0.25132; // rad/s
                    }
                    coordinateSystem
                    {
                        type cartesian;
                        origin ( 0 0 0 );
                        e1 (1 0 0);
                        e2 (0 1 0);
                    }
                }
            }
            fvSolution
            {
                PIMPLE
                {
                    nCorrectors      2;
                    nOuterCorrectors 3;
                }
            }
            fvSchemes
            {
                ddtSchemes
                {
                    default         smartBounded Euler;
                }
                gradSchemes
                {
                    default         Gauss linear;
                    gradU           cellLimited Gauss linear 1;
                    grad(p)         Gauss linear;
                }
            }
        }
        boundaryConditions
        {
            Inlet
            {
                U
                {
                    type            fixedValue;
                    value           uniform ( 0.5 0 0 );
                }
            }
            ib1
            {
                U
                {
                    type            movingWallVelocity;
                    value           uniform ( 0 0 0 );
                }
            }
            ib2
            {
                U
                {
                    type            fixedValueZone;
                    value           uniform ( 0 0 0 );
                }
                p
                {
                    type            fixedValueZone;
                    value           uniform 0;
                }
            }
        }
    }
}


// ************************************************************************* //
