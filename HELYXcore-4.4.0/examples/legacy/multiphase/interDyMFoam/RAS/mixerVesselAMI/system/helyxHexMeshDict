/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      helyxHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/helyxHexMeshDict.cfg"

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
    vessel.stl
    {
        name vessel;
        type triSurfaceMesh;
        regions
        {
            vessel
            {
                name vessel;
            }
        }
    }

    gasInlet.stl
    {
        name gasInlet;
        type triSurfaceMesh;
        regions
        {
            gasInlet
            {
                name gasInlet;
            }
        }
    }

    outlet.stl
    {
        name outlet;
        type triSurfaceMesh;
        regions
        {
            outlet
            {
                name outlet;
            }
        }
    }

    shaftRotating.stl
    {
        name shaftRotating;
        type triSurfaceMesh;
        regions
        {
            shaftRotating
            {
                name shaftRotating;
            }
        }
    }

    shaft.stl
    {
        name shaft;
        type triSurfaceMesh;
        regions
        {
            shaft
            {
                name shaft;
            }
        }
    }

    sparger.stl
    {
        name sparger;
        type triSurfaceMesh;
        regions
        {
            sparger
            {
                name sparger;
            }
        }
    }

    stirrer.stl
    {
        name stirrer;
        type triSurfaceMesh;
        regions
        {
            stirrer
            {
                name stirrer;
            }
        }
    }

    baffles.stl
    {
        name baffles;
        type triSurfaceMesh;
        regions
        {
            baffles
            {
                name baffles;
            }
        }
    }

    rotating.stl
    {
        name rotating;
        type triSurfaceMesh;
    }
};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{
    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by explicitly provided
    // edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    // Specify 'levels' in the same way as the 'distance' mode in the
    // refinementRegions (see below). The old specification
    //      level   2;
    // is equivalent to
    //      levels  ((0 2));

    features
    (
        {
           file "gasInlet.eMesh";
           levels ((1 1));
        }
        {
           file "vessel.eMesh";
           levels ((1 1));
        }
        {
           file "outlet.eMesh";
           levels ((1 1));
        }

    );

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        vessel
        {
            level (1 2);
            patchInfo
            {
                type wall;
                inGroups (meshedWalls);
            }
        }

        gasInlet
        {
            level (0 1);
            patchInfo
            {
                type patch;
            }
        }

        outlet
        {
            level (0 1);
            patchInfo
            {
                type patch;
            }
        }

        shaftRotating
        {
            level (1 1);
            patchInfo
            {
                ${...vessel.patchInfo}
            }
        }

        shaft
        {
            level (1 1);
            patchInfo
            {
                ${...vessel.patchInfo}
            }
        }

        sparger
        {
            level (1 1);
            patchInfo
            {
                ${...vessel.patchInfo}
            }
        }

        stirrer
        {
            level (1 1);
            patchInfo
            {
                ${...vessel.patchInfo}
            }
        }

        baffles
        {
            level (1 1);
            patchInfo
            {
                ${...vessel.patchInfo}
            }
        }

        rotating
        {
            level (1 2);
            cellZone rotating;
            faceZone rotating;
            cellZoneInside insidePoint;
            insidePoint (0 0.1 0.5);
        }
    }


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   increasing order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0 0.1 1.0);

    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    // Per final patch (so not geometry!) the layer information
    featureEdges
    {
    }
}

// Settings for the layer addition.
addLayersControls
{
    // Per final patch (so not geometry!) the layer information
    // Note: This behaviour changed after 21x. Any non-mentioned patches
    //       now slide unless:
    //          - nSurfaceLayers is explicitly mentioned to be 0.
    //          - angle to nearest surface < slipFeatureAngle (see below)
    layers
    {
        vessel
        {
            nSurfaceLayers      1;
            expansionRatio      1.3;
            finalLayerThickness 0.5;
            minThickness        0.1;
        }
    }
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    // Maximum non-orthogonality allowed. Set to 180 to disable.
    maxNonOrtho 65;

    // Minimum quality of the tet formed by the face-centre
    // and variable base point minimum decomposition triangles and
    // the cell centre. This has to be a positive number for tracking
    // to work. Set to very negative number (e.g. -1E30) to
    // disable.
    //    <0 = inside out tet,
    //     0 = flat tet
    //     1 = regular tet
    minTetQuality 1e-9;

    // Minimum face area. Set to <0 to disable.
    minArea -1;
}

// Advanced

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //
