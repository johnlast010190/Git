/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.4.0                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      helyxHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/helyxHexMeshDict.cfg"

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    innerCylinder.obj
    {
        type        triSurfaceMesh;
        name        innerCylinder;
        regions
        {
            ascii
            {
                 name       innerCylinder;
            }
        }
    }
    innerCylinderSmall.obj
    {
        type        triSurfaceMesh;
        name        innerCylinderSmall;
        regions
        {
            ascii
            {
                 name       innerCylinderSmall;
            }
        }
    }
    outerCylinder.obj
    {
        type        triSurfaceMesh;
        name        outerCylinder;
        regions
        {
            ascii
            {
                 name       outerCylinder;
            }
        }
    }
    propellerTip.obj.gz
    {
        type        triSurfaceMesh;
        name        propellerTip;
        regions
        {
            ascii
            {
                 name       propellerTip;
            }
        }
    }
    propellerStem1.obj
    {
        type        triSurfaceMesh;
        name        propellerStem1;
        regions
        {
            ascii
            {
                 name       propellerStem1;
            }
        }
    }
    propellerStem2.obj
    {
        type        triSurfaceMesh;
        name        propellerStem2;
        regions
        {
            ascii
            {
                 name       propellerStem2;
            }
        }
    }
    propellerStem3.obj
    {
        type        triSurfaceMesh;
        name        propellerStem3;
        regions
        {
            ascii
            {
                 name       propellerStem3;
            }
        }
    }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{
    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file        "innerCylinderSmall.eMesh";
            level       4;
        }
        {
            file        "outerCylinder.eMesh";
            level       0;
        }
        {
            file        "propellerTip.eMesh";
            level       4;
        }
//        {
//            file        "propellerStem1.eMesh";
//            level       4;
//        }
        {
            file        "propellerStem2.eMesh";
            level       4;
        }
        {
            file        "propellerStem3.eMesh";
            level       4;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        innerCylinderSmall
        {
            level       (4 4);

            faceType    boundary;
            cellZone    innerCylinderSmall;
            faceZone    innerCylinderSmall;
            cellZoneInside  inside;
        }
        outerCylinder
        {
            level       (0 0);
        }
        propellerTip
        {
            level       (4 5);
        }
        propellerStem1
        {
            level       (4 4);
        }
        propellerStem2
        {
            level       (4 4);
        }
        propellerStem3
        {
            level       (4 4);
        }
    }

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        innerCylinder
        {
            mode        inside;
            levels      ((1E15 3));
        }
        innerCylinderSmall
        {
            mode        inside;
            levels      ((1E15 4));
        }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.01 -0.5 0.01);


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
}



// Settings for the snapping.
snapControls
{
    // Per final patch (so not geometry!) the layer information
    featureEdges
    {
    }
}



// Settings for the layer addition.
addLayersControls
{
    // Per final patch (so not geometry!) the layer information
    layers
    {
    }

    relaxed
    {
        //- Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
    }
}

// ************************************************************************* //
