#!/bin/bash
#/*---------------------------------------------------------------------------*\
#|       o        |
#|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
#|   o   O   o    |  Version : 4.4.0
#|    o     o     |  ENGYS Ltd. <http://engys.com/>
#|       o        |
#\*---------------------------------------------------------------------------
#License
#    This file is part of HELYXcore.
#    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.
#
#    HELYXcore is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.
#
#Copyright
#    (c) 2011-2016 OpenFOAM Foundation
#    (c) 2017 OpenCFD Ltd.
#    (c) 2023-2024 Engys Ltd.
#
#Script
#     Alltest
#
#Description
#     Quickly test the tutorials and write out the scheme/solver information
#
#------------------------------------------------------------------------------
cd ${0%/*} || exit 1    # Run from this directory

usage()
{
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/} [OPTION]

options:
  -git              use git to retrieve the tutorials
  -root dir         specify root directory to run tests from
  -default          sets up a default scheme on all schemes
  -help             print the usage

* quickly tests the tutorials and writes out the scheme/solver information

USAGE
    exit 1
}

# Report error and exit
die()
{
    exec 1>&2
    echo
    echo "Error encountered:"
    while [ "$#" -ge 1 ]; do echo "    $1"; shift; done
    echo
    echo "See '${0##*/} -help' for usage"
    echo
    exit 1
}

#------------------------------------------------------------------------------

ROOT="./"
unset DEFAULT_SCHEMES
unset useGit

# parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    -r | -root)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        ROOT="$2"
        shift
        ;;
    -git)
        useGit=true
        ;;
    -d | -default)
        DEFAULT_SCHEMES=true
        ;;
    -junit )
        junitFlag="-junit"
        ;;
    *)
        usage "unknown option/argument: '$1'"
        ;;
    esac
    shift
done

# Set tutorial locations (as required)
# shellcheck disable=SC1090
. "$HELYX_PROJECT_DIR/bin/tools/RunFunctions"


#------------------------------------------------------------------------------


#
# set up a default scheme on all schemes
#
setDefaultFvSchemes()
{
cat<<EOF
gradSchemes { default Gauss linear; }
divSchemes
{
    default Gauss linear;
    div(phi,fu_ft_ha) Gauss multivariateSelection
    {
        fu upwind;
        ft upwind;
        h  upwind;
    };
    div(phi,ft_b_ha_hau) Gauss multivariateSelection
    {
        fu upwind;
        ft upwind;
        b  upwind;
        h  upwind;
        hu upwind;
    };
}
laplacianSchemes { default Gauss linear corrected; }
interpolationSchemes { default linear; }
snGradSchemes { default corrected; }
EOF
}

#
# Location of the main controlDict
#
unset MAIN_CONTROL_DICT

for i in \
    $HOME/.$CMAKE_PROJECT_NAME/$HELYX_PROJECT_VERSION \
    $HOME/.$CMAKE_PROJECT_NAME \
    $HELYX_PROJECT_DIR/etc \
    ;
do
    if [ -f "$i/controlDict" ]
    then
        MAIN_CONTROL_DICT="$i/controlDict"
        break
    fi
done

[ -f "$MAIN_CONTROL_DICT" ] || usage "main controlDict not found"


TUTORIALS_DIR=$ROOT
TEST_RUN_DIR=../tutorialsTest
FV_SCHEMES=\
" \
    gradScheme \
    divScheme \
    laplacianScheme \
    interpolationScheme \
    snGradScheme \
"
SCHEMES_FILE="FvSchemes"
SCHEMES_TEMP="FvSchemes.temp"
SOLVERS_FILE="FvSolution"
SOLVERS_TEMP="FvSolution.temp"


#
# MAIN
#

if [ -d "$TEST_RUN_DIR" ]
then
    echo "Removing old directory: $TEST_RUN_DIR" 1>&2
    rm -rf $TEST_RUN_DIR
fi

echo "Modifying ${MAIN_CONTROL_DICT}" 1>&2
if [ -e "${MAIN_CONTROL_DICT}".orig ]
then
    die "File ${MAIN_CONTROL_DICT}.orig already exists" \
        "Did Alltest fail in some way and then run again?"
fi

# Clean up on termination and on Ctrl-C
trap 'mv ${MAIN_CONTROL_DICT}.orig ${MAIN_CONTROL_DICT} 2>/dev/null; exit 0' \
    EXIT TERM INT
cp "${MAIN_CONTROL_DICT}" "${MAIN_CONTROL_DICT}".orig

sed \
    -e s/"\(fvSchemes[ \t]*\)\([0-9]\);"/"\1 1;"/g \
    -e s/"\(solution[ \t]*\)\([0-9]\);"/"\1 1;"/g  \
    "${MAIN_CONTROL_DICT}".orig > "${MAIN_CONTROL_DICT}"

if [ -n "$useGit" ]
then
    echo "Copying the tutorials from current git branch" 1>&2
    if  git rev-parse --is-inside-work-tree > /dev/null 2>&1 && \
        base="$(git rev-parse --show-toplevel 2>/dev/null)"
    then
        mkdir -p ${TEST_RUN_DIR}
        ( cd "$base"/examples && git archive --format=tar HEAD . ) | \
        ( cd $TEST_RUN_DIR && tar -xf - )
    else
        die "Not in a git-repo"
    fi
else
    echo "Copying the tutorials" 1>&2
    cp -a "${TUTORIALS_DIR}" ${TEST_RUN_DIR}
fi


cd ${TEST_RUN_DIR} || exit 1

echo "Remove cases that cannot be run with Alltest" 1>&2

if [ -d "legacy/incompressible/pimpleDyMFoam/propeller" ]
then
   rm -rf legacy/incompressible/pimpleDyMFoam/propeller > /dev/null 2>&1
fi

if [ -d "legacy/incompressible/pisoFoam/LES/pitzDailyVolumetricFFT" ]
then
    rm -rf legacy/incompressible/pisoFoam/LES/pitzDailyVolumetricFFT > /dev/null 2>&1
fi

if [ -d "legacy/multiphase/interDyMFoam/RAS/motorBike"  ]
then
    rm -rf legacy/multiphase/interDyMFoam/RAS/motorBike > /dev/null 2>&1
fi

if [ -d "legacy/multiphase/reactingTwoPhaseEulerFoam/laminar/bubbleColumnEvaporatingDissolving" ]
then
   rm -rf legacy/multiphase/reactingTwoPhaseEulerFoam/laminar/bubbleColumnEvaporatingDissolving > /dev/null 2>&1
fi

if [ -d "mesh/helyxHexMesh/VDBrefinement"  ]
then
    rm -rf mesh/helyxHexMesh/VDBrefinement > /dev/null 2>&1
fi

# Temporary remove one reacting tutorial from CI (issue might be legacy thermo)
if [ -d "legacy/lagrangian/reactingParcelFoam/verticalChannelLTS" ]
then
   rm -rf legacy/lagrangian/reactingParcelFoam/verticalChannelLTS > /dev/null 2>&1
fi

if [ -d "preProcessing/surface/helyxVDBSurfaceWrap" ]
then
   rm -rf preProcessing/surface/helyxVDBSurfaceWrap > /dev/null 2>&1
fi

echo "Remove case sets that are already covered by helyxVerify" 1>&2

rm -rf helyxSolve > /dev/null 2>&1
rm -rf modules > /dev/null 2>&1
rm -rf tests > /dev/null 2>&1

rm -rf legacy/helyxAero/LES/Ahmed25deg > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/damBreak > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/floatingObject > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/KCS_Fn026 > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/linearSloshing > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/porousDamBreak > /dev/null 2>&1
rm -rf legacy/multiphase/hydro/resonantSloshing > /dev/null 2>&1
rm -rf legacy/multiphase/interDyMFoam/RAS/floatingObject > /dev/null 2>&1
rm -rf legacy/multiphase/interPhaseChangeDyMFoam/nonConformalCavitatingPropeller > /dev/null 2>&1

# Temporary remove of cases getting stuck with OpenMPI-4.1.7
if [[ "$HELYX_MPI_NAME" == "openmpi-4.1.7" ]]; then
    rm -rf legacy/lagrangian/icoUncoupledKinematicParcelFoam  > /dev/null 2>&1
fi

echo "Modifying the controlDicts to run only one time step" 1>&2

for CD in $(find . -name "controlDict*" -type f)
do
    mv "${CD}" "${CD}".orig
    sed \
        -e s/"\(startFrom[ \t]*\)\([a-zA-Z]*\);"/"\1 latestTime;"/g \
        -e s/"\(stopAt[ \t]*\)\([a-zA-Z]*\);"/"\1 nextWrite;"/g \
        -e s/"\(writeControl[ \t]*\)\([a-zA-Z]*\);"/"\1 timeStep;"/g \
        -e s/"\(writeInterval[ \t]*\)\([0-9a-zA-Z.-]*\);"/"\1 1;"/g \
        "${CD}".orig > "${CD}"
done

for CSD in `find . -name "caseSetupDict*"`
do
    mv ${CSD} ${CSD}.org
    sed \
    -e s/"\(startFrom[ \t]*\)\([a-zA-Z]*\);"/"\1 latestTime;"/g \
    -e s/"\(stopAt[ \t]*\)\([a-zA-Z]*\);"/"\1 nextWrite;"/g \
    -e s/"\(writeControl[ \t]*\)\([a-zA-Z]*\);"/"\1 timeStep;"/g \
    -e s/"\(writeInterval[ \t]*\)\([0-9a-zA-Z.-]*\);"/"\1 1;"/g \
    ${CSD}.org > ${CSD}
done

if [ "$DEFAULT_SCHEMES" = true ]
then
    echo "Modifying the fvSchemes to contain only default schemes" 1>&2
    for FV_SC in $(find . -name fvSchemes -type f)
    do
        for S in $FV_SCHEMES
        do
            mv ${FV_SC} "${FV_SC}".orig
            sed -e /"${S}"/,/$p/d ${FV_SC}.orig > ${FV_SC}
        done
        setDefaultFvSchemes >> ${FV_SC}
    done
fi


cp -f $HELYX_TUTORIALS/Allrun .
./Allrun "$junitFlag"

sed -e :a -e '/\\$/N; s/\\\n//; ta' Allrun > temp
APPLICATIONS=\
    $(grep "applications=" temp | sed 's/applications=\"\([A-Za-z \t]*\)\"/\1/g')

rm $SCHEMES_FILE > /dev/null 2>&1
for APP in $APPLICATIONS
do
    echo $APP >> $SCHEMES_FILE
    echo "$APP: " | tr -d "\n" >> $SOLVERS_FILE
    for ST in $FV_SCHEMES
    do
        rm $SCHEMES_TEMP $SOLVERS_TEMP > /dev/null 2>&1
        echo "  ${ST}" >> $SCHEMES_FILE
        for LOG in $(find ${APP} -name "log.${APP}" -type f)
        do
            for S in $(grep ${ST} ${LOG} | cut -d" " -f4)
            do
                echo "    ${S}" >> $SCHEMES_TEMP
            done
        echo $(grep solver ${LOG} | cut -d" " -f4) >> $SOLVERS_TEMP
        done
        if [ -f $SCHEMES_TEMP ]
        then
            cat $SCHEMES_TEMP | sort -u >> $SCHEMES_FILE
        fi
    done
    cat $SOLVERS_TEMP | tr " " "\n" | sort -u | tr "\n" " " >> $SOLVERS_FILE
    echo "" >> $SOLVERS_FILE
done

#------------------------------------------------------------------------------
