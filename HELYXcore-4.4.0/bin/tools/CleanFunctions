#---------------------------------------------------------------------------
#|       o        |
#|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
#|   o   O   o    |  Version : 4.4.0
#|    o     o     |  ENGYS Ltd. <http://engys.com/>
#|       o        |
#---------------------------------------------------------------------------
#License
#    This file is part of HELYXcore.
#    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.
#
#    HELYXcore is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.

#Copyright
#    (c) 2011-2016 OpenFOAM Foundation
#    (c) 2015 OpenCFD Ltd.
#    (c) 2010-2022 Engys Ltd.
#
#Script
#     CleanFunctions
#
#Description
#     Miscellaneous cleanup functions for tutorial cases
#
#------------------------------------------------------------------------------

cleanTime0()
{
    rm -rf ./0
}

cleanTimeDirectories()
{
    if [ "$VERBOSE" != "false" ]; then
        echo "Cleaning $PWD case"
    fi

    zeros=""
    while [ ${#zeros} -lt 8 ]
    do
        timeDir="0.${zeros}[1-9]*"
        rm -rf ./${timeDir} ./-${timeDir} > /dev/null 2>&1
        zeros="0$zeros"
    done
    rm -rf \
        ./[1-9]* ./-[1-9]* ./log ./log.* ./log-* ./logSummary.* \
        ./.fxLock ./*.xml ./ParaView* ./paraFoam* ./*.OpenFOAM ./*.foam ./*.blockMesh \
        ./.setSet > /dev/null 2>&1
}


cleanDynamicCode()
{
    if [ -d system -a -d dynamicCode ]
    then
        rm -rf dynamicCode > /dev/null 2>&1
    fi
}


cleanSnappyFiles()
{
    rm -f \
        constant/polyMesh/cellLevel \
        constant/polyMesh/pointLevel \
        constant/polyMesh/refinementHistory \
        constant/polyMesh/level0Edge \
        constant/polyMesh/surfaceIndex > /dev/null 2>&1
    rm -f \
        processor*/constant/polyMesh/cellLevel \
        processor*/constant/polyMesh/pointLevel \
        processor*/constant/polyMesh/refinementHistory \
        processor*/constant/polyMesh/level0Edge \
        processor*/constant/polyMesh/surfaceIndex > /dev/null 2>&1
    rm -f \
        constant/cellLevel \
        constant/pointLevel \
        0/cellLevel \
        0/pointLevel > /dev/null 2>&1
    rm -f \
        processor*/constant/cellLevel \
        processor*/constant/pointLevel \
        processor*/0/cellLevel \
        processor*/0/pointLevel > /dev/null 2>&1
}


cleanConstant()
{
    if [ -d constant/polyMesh ]
    then
        (cd constant/polyMesh && \
            rm -rf \
            allOwner* cell* face* meshModifiers* \
            owner* neighbour* point* edge* \
            cellLevel* pointLevel* refinementHistory* surfaceIndex* sets \
            > /dev/null 2>&1 \
        )
    fi
    (cd constant && \
        rm -rf \
        cellToRegion cellLevel* pointLevel* \
        > /dev/null 2>&1 \
    )
}


cleanCase()
{
    #check for -silent|-i option
    VERBOSE=true
    # Parse options and executable
    while [ $# -gt 0 ] ; do
        key="$1"
        case "$key" in
            -silent|-i)
                VERBOSE=false
                ;;
        esac
        shift
    done


    cleanTimeDirectories
    cleanDynamicCode

    rm -rf processor* > /dev/null 2>&1
    rm -rf postProcessing > /dev/null 2>&1
    rm -rf system/boundaryConditions > /dev/null 2>&1
    rm -rf system/*/boundaryConditions > /dev/null 2>&1
    rm -rf TDAC > /dev/null 2>&1
    rm -rf probes* > /dev/null 2>&1
    rm -rf forces* > /dev/null 2>&1
    rm -rf graphs* > /dev/null 2>&1
    rm -rf sets > /dev/null 2>&1
    rm -rf surfaceSampling > /dev/null 2>&1
    rm -rf cuttingPlane > /dev/null 2>&1
    rm -rf system/machines > /dev/null 2>&1
    rm -rf Ensight EnSight ensightWrite VTK > /dev/null 2>&1
    rm -rf *.vtk
    rm -rf layerInfo > /dev/null 2>&1

    # From mpirunDebug
    rm -f gdbCommands  mpirun.schema

    cleanSnappyFiles
    rm -f 0/cellDist > /dev/null 2>&1

    if [ -d constant ]
    then
        (cd constant && \
            rm -rf \
            cellDecomposition cellToRegion cellLevel* fvMesh \
            pointLevel* polyMesh */polyMesh tetDualMesh \
            > /dev/null 2>&1 \
        )
    fi

    if [ -e system/blockMeshDict.m4 ]
    then
        rm -f system/blockMeshDict > /dev/null 2>&1
    fi
}


removeCase()
{
    echo "Removing ${1:-unknown} case"
    [ "$#" -ge 1 ] && rm -rf "$1"
}


cleanSamples()
{
    rm -rf ./sets ./samples ./sampleSurfaces > /dev/null 2>&1
}


cleanUcomponents()
{
    rm -rf 0/Ux 0/Uy 0/Uz > /dev/null 2>&1
}


cleanApplication()
{
    echo "Cleaning $PWD application"
    wclean
}


#------------------------------------------------------------------------------
