#!/bin/bash
#---------------------------------------------------------------------------
#|       o        |
#|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
#|   o   O   o    |  Version : 4.4.0
#|    o     o     |  ENGYS Ltd. <http://engys.com/>
#|       o        |
#---------------------------------------------------------------------------
#License
#    This file is part of HELYXcore.
#    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.
#
#    HELYXcore is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.

#Copyright
#    (c) 2011-2016 OpenFOAM Foundation
#    (c) 2016-2017 OpenCFD Ltd.
#
# Script
#     foamConfigurePaths
#
# Description
#     Adjust hardcoded versions and installation paths (for bash, POSIX shell).
#
#------------------------------------------------------------------------------
usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/}
  -foamInstall dir        specify installation directory (eg, /opt)
  -foamVersion ver        specify project version (eg, 1612)
  -projectName name       specify project directory name (eg, openfoam1612)
  -archOption 32|64       specify 'HELYX_BUILD_PLATFORM_OPTION' architecture option
  -int32  | -int64        specify 'HELYX_LABEL_SIZE'
  -SP     | -DP           specify 'HELYX_PRECISION_OPTION'
  -system name            specify 'system' compiler to be used
  -third  name            specify 'ThirdParty' compiler to be used
  -boost ver              specify 'boost_version'
  -boost-path dir         specify 'BOOST_ARCH_PATH'
  -clang ver              specify 'clang_version' for ThirdParty Clang
  -cmake ver              specify 'cmake_version'
  -fftw ver               specify 'fffw_version'
  -fftw-path dir          specify 'FFTW_ARCH_PATH'
  -mpi name               specify type for 'WM_MPLIB' (eg, FJMPI, INTELMPI, etc)
  -openmpi ver            specify ThirdParty openmpi version for 'HELYX_MPI_NAME'
  -openmpi-system         activate system openmpi
  -openmpi-third          activate ThirdParty openmpi (using default version)
  -scotch ver             specify 'SCOTCH_VERSION' (eg, scotch_6.0.4)
  -scotch-path dir        specify 'SCOTCH_ARCH_PATH' (eg, /opt/OpenFOAM-scotch_6.0.4)
  -vtk  ver               specify 'vtk_version' (eg, VTK-7.1.0)
  -mesa ver               specify 'mesa_version' (eg, mesa-13.0.1)
  -sigfpe | -no-sigfpe    activate/deactivate FOAM_SIGFPE handling
  gmp-VERSION             for ThirdParty gcc (gmp-system for system library)
  mpfr-VERSION            for ThirdParty gcc (mpfr-system for system library)
  mpc-VERSION             for ThirdParty gcc (mpc-system for system library)

* Adjust hardcoded versions and installation paths (for bash, POSIX shell).

Equivalent options:
  -foamInstall          --foamInstall
  -foamVersion          --projectVersion
  -projectName          --projectName
  -archOption           --archOption
  -third                -ThirdParty
  -paraview             --paraviewVersion | -paraviewVersion
  -paraview-path        --paraviewInstall | -paraviewInstall
  -scotch               --scotchVersion | -scotchVersion
  -scotch-path          --scotchArchPath | -scotchArchPath

USAGE
    exit 1
}

# Check that it appears to be an OpenFOAM installation
[ -f etc/bashrc -a -d etc/config.sh ] || \
    usage "Please run from top-level directory of installation"


# Report error and exit
die()
{
    exec 1>&2
    echo
    echo "Error encountered:"
    while [ "$#" -ge 1 ]; do echo "    $1"; shift; done
    echo
    echo "See '${0##*/} -help' for usage"
    echo
    exit 1
}


# Check if argument matches the expected input. Respects case.
# Uses sed for consistency with the replacement routines.
#
# _matches <arg> <matcher> [... <matcherN>]
#
_matches()
{
    local input="$1"
    shift
    local result
    for regexp
    do
        result=$(echo "$input" | sed -n -e "/^$regexp"'$/p')
        test -n "$result" && return 0  # successful match
    done
    return 1
}


# Function to do replacement on file. Checks if any replacement has been done.
# _inlineSed <file> <regexp> <replacement> <msg>
_inlineSed()
{
    local file="$1"
    local regexp="$2"
    local replacement="$3"
    local msg="$4"
    local cmd='/^[^#]/s@'"$regexp"'@'"$replacement"'@'

    [ -f "$file" ] || {
        echo "Missing file: $file"
        exit 2 # Fatal
    }

    grep -q "$regexp" "$file" && sed -i -e "$cmd" "$file" || { \
        echo "Failed: ${msg:-replacement} in $file"
        return 1
    }

    [ -n "$msg" ] && echo "    $msg  ($file)"

    return 0
}


# Standard <key> <val> type of replacements.
# replace <file> <key1> <val1> .. <keyN> <valN>
# looks for KEYWORD=.*
replace()
{
    local file="$1"
    shift

    local key
    local val

    while [ "$#" -ge 2 ]
    do
        key=$1
        val=$2
        shift 2

        _inlineSed \
            $file  \
            "$key=.*" \
            "$key=$val" \
            "Replaced $key setting by '$val'"
    done
}

#------------------------------------------------------------------------------

unset adjusted optMpi
# Parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help | --help)
        usage
        ;;
    '')
        # Discard empty arguments
        ;;

    -foamInstall | --foamInstall)
        # Replace FOAM_INST_DIR=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        foamInstDir="$2"
        _inlineSed \
            etc/bashrc \
            '\(.*BASH_SOURCE.*\)' \
            '## \1' \
            "Remove default FOAM_INST_DIR setting" \
        && _inlineSed \
            etc/bashrc \
            '\(.* && FOAM_INST_DIR\)' \
            '## \1'

        _inlineSed \
            etc/bashrc \
            '^ *FOAM_INST_DIR=.*' \
            'FOAM_INST_DIR='"$foamInstDir" \
            "Setting FOAM_INST_DIR to '$foamInstDir'"

        adjusted=true
        shift
        ;;

   -projectName | --projectName)
        # Replace HELYX_PROJECT_DIR=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        projectName="$2"
        _inlineSed \
            etc/bashrc \
            'HELYX_PROJECT_DIR=.*' \
            'HELYX_PROJECT_DIR=$CMAKE_PROJECT_NAME_INST_DIR/'"$projectName" \
            "Replaced HELYX_PROJECT_DIR setting by $projectName"

        adjusted=true
        shift
        ;;

   -foamVersion | --projectVersion)
        # Replace HELYX_PROJECT_VERSION=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/bashrc  HELYX_PROJECT_VERSION "$2"
        adjusted=true
        shift
        ;;

    -archOption | --archOption)
        # Replace HELYX_BUILD_PLATFORM_OPTION=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        _matches "$2" 32 64 || die "'$1' option has bad value: '$2'"

        optionValue="$2"
        if [ "$optionValue" = "$(sed -ne '/^[^#]/s/^.* HELYX_BUILD_PLATFORM_OPTION=//p' etc/bashrc)" ]
        then
            echo "HELYX_BUILD_PLATFORM_OPTION already set to $optionValue"
            : ${adjusted:=false}
        else
            replace etc/bashrc  HELYX_BUILD_PLATFORM_OPTION "$optionValue"
            adjusted=true
        fi
        shift
        ;;

    -int32 | -int64)
        # Replace HELYX_LABEL_SIZE=...
        optionValue="${1#-int}"
        replace etc/bashrc  HELYX_LABEL_SIZE "$optionValue"
        adjusted=true
        ;;

    -SP | -DP)
        # Replace HELYX_PRECISION_OPTION=...
        optionValue="${1#-}"
        replace etc/bashrc  HELYX_PRECISION_OPTION "$optionValue"
        adjusted=true
        ;;

    -system)
        # Replace HELYX_COMPILER_TYPE=... and HELYX_COMPILER=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/bashrc  HELYX_COMPILER_TYPE system  HELYX_COMPILER "$2"
        adjusted=true
        shift
        ;;

    -third | -ThirdParty)
        # Replace HELYX_COMPILER_TYPE=... and HELYX_COMPILER=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/bashrc  HELYX_COMPILER_TYPE ThirdParty  HELYX_COMPILER "$2"
        adjusted=true
        shift
        ;;

    -boost)
        # Replace boost_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        adjusted=true
        shift
        ;;

    -boost-path)
        # Replace BOOST_ARCH_PATH=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        adjusted=true
        shift
        ;;

    -fftw)
        # Replace fftw_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/FFTW  fftw_version "$2"
        adjusted=true
        shift
        ;;

    -fftw-path)
        # Replace FFTW_ARCH_PATH=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/FFTW  FFTW_ARCH_PATH "$2"
        adjusted=true
        shift
        ;;

    -clang)
        # Replace clang_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/compiler  clang_version "$2"
        adjusted=true
        shift
        ;;

    -cmake)
        # Replace cmake_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/paraview  cmake_version "$2"
        adjusted=true
        shift
        ;;

    -mpi)
        # Explicitly set WM_MPLIB=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/bashrc  WM_MPLIB "$2"
        optMpi=system
        adjusted=true
        shift
        ;;

    -openmpi)
        # Replace HELYX_MPI_NAME=openmpi-<digits>.. and set to use third-party
        #  The edit is slightly fragile, but works
        expected="openmpi-[1-9][.0-9]*"
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        optMpi="$2"
        _matches "$optMpi" "$expected" || die "'$1' option has bad value: '$optMpi'"

        _inlineSed etc/config.sh/mpi \
            "HELYX_MPI_NAME=$expected" \
            "HELYX_MPI_NAME=$optMpi" \
            "Replaced 'HELYX_MPI_NAME=$expected' setting by 'HELYX_MPI_NAME=$optMpi'"

        replace etc/bashrc  WM_MPLIB OPENMPI
        adjusted=true
        shift
        ;;

    -openmpi-system)
        # Explicitly set WM_MPLIB=SYSTEMOPENMPI
        replace etc/bashrc  WM_MPLIB SYSTEMOPENMPI
        optMpi=system
        adjusted=true
        ;;

    -openmpi-third)
        # Explicitly set WM_MPLIB=OPENMPI, using default setting for openmpi
        replace etc/bashrc  WM_MPLIB OPENMPI
        optMpi=third
        adjusted=true
        ;;

    -scotch | -scotchVersion | --scotchVersion)
        # Replace SCOTCH_VERSION=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/scotch  SCOTCH_VERSION "$2"
        adjusted=true
        shift
        ;;

    -scotch-path | -scotchArchPath | --scotchArchPath)
        # Replace SCOTCH_ARCH_PATH=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/scotch  SCOTCH_ARCH_PATH "$2"
        adjusted=true
        shift
        ;;

    -vtk)
        # Replace vtk_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/vtk  vtk_version "$2"
        adjusted=true
        shift
        ;;

    -mesa)
        # Replace mesa_version=...
        [ "$#" -ge 2 ] || die "'$1' option requires an argument"
        replace etc/config.sh/vtk  mesa_version "$2"
        adjusted=true
        shift
        ;;

    gmp-[4-9]* | gmp-system)
        # gcc-related package
        replace etc/config.sh/compiler  gmp_version "$1"
        adjusted=true
        ;;

    mpfr-[2-9]* | mpfr-system)
        # gcc-related package
        replace etc/config.sh/compiler  mpfr_version "$1"
        adjusted=true
        ;;

    mpc-[0-9]* | mpc-system)
        # gcc-related package
        replace etc/config.sh/compiler  mpc_version "$1"
        adjusted=true
        ;;

    -sigfpe)
        # Enable FOAM_SIGFPE handling
        _inlineSed etc/bashrc \
            "[a-z][a-z]* FOAM_SIGFPE.*" \
            "export FOAM_SIGFPE=" \
            "Activate FOAM_SIGFPE handling"
        ;;

    -no-sigfpe)
        # Disable FOAM_SIGFPE handling
        _inlineSed etc/bashrc \
            "[a-z][a-z]* FOAM_SIGFPE.*" \
            "unset FOAM_SIGFPE" \
            "Deactivate FOAM_SIGFPE handling"
        ;;

    *)
        die "unknown option/argument: '$1'"
        ;;
    esac
    shift
done

if [ "$adjusted" = false ]
then
    echo "Nothing adjusted"
    exit 0
elif [ -z "$adjusted" ]
then
    die "Please specify at least one configure option"
fi

#------------------------------------------------------------------------------
