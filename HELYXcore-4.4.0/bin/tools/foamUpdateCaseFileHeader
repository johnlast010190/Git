#!/bin/bash
#---------------------------------------------------------------------------
#|       o        |
#|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
#|   o   O   o    |  Version : 4.4.0
#|    o     o     |  ENGYS Ltd. <http://engys.com/>
#|       o        |
#---------------------------------------------------------------------------
#License
#    This file is part of HELYXcore.
#    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.
#
#    HELYXcore is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.

#Copyright
#    (C) 2011-2016 OpenFOAM Foundation
#    (C) 2018-2019 OpenCFD Ltd.
#    (C) 2023 Engys Ltd.
#
#Script
#    foamUpdateCaseFileHeader
#
#Description
#    Updates the header of application files and removes consecutive
#    blank lines.
#
#    By default, writes current version in the header,
#    but the version can also be specified with the -version option.
#
#------------------------------------------------------------------------------

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: ${0##*/} [OPTION] <file1> ... <fileN>

options:
  -version=<ver>    Specifies the version to be written in the header
  -h | -help        Print the usage

Updates the header of application files and removes consecutive blank lines.
By default, writes current HELYX version in the header.
An alternative version can be specified with the -version option.

USAGE
    exit 1
}

#------------------------------------------------------------------------------

# parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help*)
        usage
        ;;
    -version=*)
        version="${1#*=}"
        ;;
    -v | -version)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        version="$2"
        shift
        ;;
    -*)
        usage "unknown option: '$1'"
        ;;
    *)
        break
        ;;
    esac
    shift
done

[ $# -ge 1 ] || usage

#------------------------------------------------------------------------------

# constant width for version - default to HELYX_PROJECT_VERSION

if [ -z "$version" ]
then
    if [ -n "$HELYX_PROJECT_VERSION" ]
    then
        version="$HELYX_PROJECT_VERSION"
    else
        version="Dev"
    fi
fi
version=$(printf %-48s "${version:-$HELYX_PROJECT_VERSION}")

#------------------------------------------------------------------------------

printBanner()
{
    cat<<BANNER
/*--------------------------------*- C++ -*----------------------------------*\\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : $version|
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\\*---------------------------------------------------------------------------*/
BANNER
}

printFoamFile()
{
echo "FoamFile"
echo "{"
echo "    version     2.0;"
echo "    format      $1;"
echo "    class       $2;"
echo "    object      $3;"
echo "}"
}

printFoamFileM4()
{
echo "FoamFile"
echo "{"
echo "    version     2.0;"
echo "    \`format'      $1;"
echo "    class       $2;"
echo "    object      $3;"
echo "}"
}


#
# Extract attribute '$1' from file '$2'
#
FoamFileAttribute()
{
    sed -n -e 's/[ ;]*$//' -e "s/^ *$1 *//p" "$2"
}

#
# Extract attribute `format' (m4) from file '$1'
#
FoamFileFormatM4()
{
    sed -n -e 's/[ ;]*$//' -e "s/^ *.format' *//p" "$1"
}


#
# Main
#

tmpFile="FoamFile.tmp$$"
for caseFile
do
    if grep -q FoamFile "$caseFile" 2>/dev/null
    then
        echo "Updating case file: $caseFile"
        sed -n '/FoamFile/,/}/p' "$caseFile" > "$tmpFile"

        format=$(FoamFileAttribute format "$tmpFile")
        class=$(FoamFileAttribute  class  "$tmpFile")
        object=$(FoamFileAttribute object "$tmpFile")
        # extract note? - needs special handling
        unset m4format note

        if [ -n "$format" ]
        then
            printBanner > "$tmpFile"
            printFoamFile "$format" "$class" "$object" >> "$tmpFile"
        else
            # No format? Could be an m4 file with `format'
            format=$(FoamFileFormatM4 "$tmpFile")

            if [ -n "$format" ]
            then
                printBanner > "$tmpFile"
                printFoamFileM4 "$format" "$class" "$object" >> "$tmpFile"
            else
                echo "Missing format: $caseFile" 1>&2
                continue
            fi
        fi

        sed '1,/}/d' "$caseFile" | sed '/./,/^$/!d' >> "$tmpFile"

        # Use cat to avoid removing/replace soft-links
        [ -s "$tmpFile" ] && cat "$tmpFile" >| "$caseFile"
        rm -f "$tmpFile"

        if [ "$format" = binary ]
        then
            echo "Changed binary file?  $caseFile" 1>&2
        fi
    else
        echo "Invalid case file: $caseFile" 1>&2
    fi
done

#------------------------------------------------------------------------------
