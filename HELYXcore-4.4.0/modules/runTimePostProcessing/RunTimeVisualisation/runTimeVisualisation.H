/*---------------------------------------------------------------------------*\
|       o        |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
|   o   O   o    |  Version : 4.4.0
|    o     o     |  ENGYS Ltd. <http://engys.com/>
|       o        |
\*---------------------------------------------------------------------------
License
    This file is part of HELYXcore.
    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.

    HELYXcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.

Copyright
    (c) 2015-2019 OpenCFD Ltd.
    (c) 2020-2025 Engys Ltd.

Class
    Foam::functionObjects::runTimeVis::runTimeVisualisation

Group
    grpGraphicsFunctionObjects

Description
    Generate images during run-time.

    The functionality makes use of the VTK libraries (see http://www.vtk.org)
    which provide a broad set of functionality for scene composition and
    manipulation.

    Images are generated using the PostDict file generated by the Helyx GUI.
    This is a complex file, and even a brief description of how it works is
    beyond the scope of this comment.

    The runTimeVisualisation instance supervises several helper classes that
    deal with reading the postDict, constructing the necessary data structures,
    and rendering the scene.  The runTimeVisualisation instance also provides
    permanent storage for objects that do not exist in the object tree, for
    example surfaces from geometry files.

    The runTimeVisualisation class is a bit of a do-everything class - most of
    the OpenFOAM interface and file I/O happens here.

SourceFiles
    runTimeVisualisation.C

\*---------------------------------------------------------------------------*/

#pragma once

#include <memory>

#include "rtppFunctionObject.H"
#include "infos/runTimeVisualisationInfo.H"
#include "scene/scene.H"
#include "dictionaries/dictionaries.H"
#include "compileOptions.H"

#include "postDictObjectProviderDatabase.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Forward declarations

namespace Foam::functionObjects
{

/*---------------------------------------------------------------------------*\
                   Class runTimeVisualisation Declaration
\*---------------------------------------------------------------------------*/

class runTimeVisualisation : public rtppFunctionObject
{

private:

    // Private member variables
    runTimeVis::Dictionaries dictionaries_;

    const runTimeVis::RunTimeVisualisationInfo rtppInfo_;
    runTimeVis::PostDictObjectProviderDatabase database_;

    // Private Member Functions

    void beforeRendering();
    void renderScenes();
    void afterRendering();

    static void turnFloatingPointExceptionsOff();
    static void turnFloatingPointExceptionsOn();

#if KEEP_SCENES_IN_MEMORY
    std::vector<runTimeVis::Scene> scenes_;
    void createScenes();
#endif

public:

    //- Runtime type information
    TypeName("runTimeVisualisation");

    // Constructors

    //- Construct from dictionary
    runTimeVisualisation
        (
            const word &name,
            const Time &runTime,
            const dictionary &dict
        );


    //- Destructor
    ~runTimeVisualisation() override = default;

    // Member Functions

    //- Execute, currently does nothing
    bool execute() override
    { return true; }

    bool write() override;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// ************************************************************************* //
