#! /usr/bin/env python

# This is a bit warped because
# a. It has to support inconsistent version numbers
# b. Should give the same results as the old shell-implementation

import re
import sys
from os import path,environ

# This part is lifted from six.py (https://pythonhosted.org/six/) to
# make sure that this script runs with Python 2 and Python 3

# True if we are running on Python 3.
PY3 = sys.version_info[0] == 3

if PY3:
    import builtins
    print_ = getattr(builtins, "print")
    del builtins
else:
    def print_(*args, **kwargs):
        """The new-style print function."""
        fp = kwargs.pop("file", sys.stdout)
        if fp is None:
            return
        def write(data):
            if not isinstance(data, basestring):
                data = str(data)
            fp.write(data)
        want_unicode = False
        sep = kwargs.pop("sep", None)
        if sep is not None:
            if isinstance(sep, unicode):
                want_unicode = True
            elif not isinstance(sep, str):
                raise TypeError("sep must be None or a string")
        end = kwargs.pop("end", None)
        if end is not None:
            if isinstance(end, unicode):
                want_unicode = True
            elif not isinstance(end, str):
                raise TypeError("end must be None or a string")
        if kwargs:
            raise TypeError("invalid keyword arguments to print()")
        if not want_unicode:
            for arg in args:
                if isinstance(arg, unicode):
                    want_unicode = True
                    break
        if want_unicode:
            newline = unicode("\n")
            space = unicode(" ")
        else:
            newline = "\n"
            space = " "
        if sep is None:
            sep = space
        if end is None:
            end = newline
        for i, arg in enumerate(args):
            if i:
                write(sep)
            write(arg)
        write(end)


# Parse WM_PROJECT_VERSION to guess which fork and its version
foamFork  = "openfoamplus"
of_version_major=1706
of_version_minor=0
of_version_patch=0
of_version_patch_num=0

templateString="""// OpenFOAM versions information
// generated by the Allwmake-script of the swak4Foam-distro
#ifndef foamVersion4swak_H
#define foamVersion4swak_H

#define FOAM_VERSION4SWAK_FORK  {foamFork}
#define FOAM_VERSION4SWAK_MAJOR {of_version_major}
#define FOAM_VERSION4SWAK_MINOR {of_version_minor}
#define FOAM_VERSION4SWAK_PATCH {of_version_patch}
#define FOAM_VERSION4SWAK_PATCH_NUM {of_version_patch_num}

"""

# Add define for the fork, with some linear versioning
#
# #define FOAM_VERSION4SWAK_IS_<forkName> <major>
# #undef  FOAM_VERSION4SWAK_IS_<forkName>   If it is not that fork
#
# Return True if it is that fork, False otherwise
def addFork(fName):
    global templateString

    if foamFork == fName:
        templateString += "#define FOAM_VERSION4SWAK_IS_"+fName.upper()
        if of_version_major > 1 and of_version_major < 2999:
            # information about the major version appears reliable
            templateString += " " + str(of_version_major)+"\n"
        else:
            templateString += " 1\n"
        return True
    else:
        templateString += "#undef  FOAM_VERSION4SWAK_IS_"+fName.upper() + "\n"
        return False


addFork("openfoam")
addFork("extend")

if addFork("openfoamplus"):
    # OPENFOAM_PLUS is a 4-digit release date, added after 1606.
    # The release versioning now follows year/month.
    #
    # Released v3.0+ followed by v1606+, v1612+, ...
    # Provide a release date for v3.0+ (2016-01) to fit this scheme.
    # Later versions can obtain it from the WM_PROJECT_VERSION directly
    # or rely on the OpenFOAM wmake rules to provide it.
    if of_version_major == 3:
        templateString += """
// OPENFOAM_PLUS is the release date (YYMM) as an integer, added after 1606.
// OpenFOAM-v3.0+ (released 201601)
#ifndef OPENFOAM_PLUS
# define OPENFOAM_PLUS 1601
#endif
"""
    elif of_version_major > 1600 and of_version_major < 1612:
        templateString += """
// OPENFOAM_PLUS is the release date (YYMM) as an integer, added after 1606.
#ifndef OPENFOAM_PLUS
# define OPENFOAM_PLUS {of_version_major}
#endif
"""
    else:
        templateString += """
// OPENFOAM_PLUS is the release date (YYMM) as an integer, added after 1606.
"""

# Finish header
templateString += "\n#endif\n"

print_(templateString.format(foamFork=foamFork,
                             of_version_major=of_version_major,
                             of_version_minor=of_version_minor,
                             of_version_patch=of_version_patch,
                             of_version_patch_num=of_version_patch_num))

print_("OpenFOAM-version: Major {of_version_major} Minor {of_version_minor} Patch {of_version_patch} (-1 == x / {of_version_patch_num}) Fork: {foamFork}".format(
    foamFork=foamFork,
    of_version_major=of_version_major,
    of_version_minor=of_version_minor,
    of_version_patch=of_version_patch,
    of_version_patch_num=of_version_patch_num),
      file=sys.stderr)
