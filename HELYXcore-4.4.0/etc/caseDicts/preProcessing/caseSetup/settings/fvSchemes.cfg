ddtEuler
{
    default         steadyState;
}
ddtEuler_boundedTurbulence
{
    default         Euler;
    ddt(rho,k)      bounded Euler;
    ddt(rho,epsilon) bounded Euler;
    ddt(rho,omega)  bounded Euler;
}
ddtLocalEuler
{
    default         localEuler rDeltaT;
}
ddtBackward
{
    default         backward;
}

fvSchemes_misc
{
    interpolationSchemes 
    {
        default         linear;
        interpolate(HbyA) linear;
    }
    laplacianSchemes {default Gauss linear limited 0.333;}
    snGradSchemes {default limited 0.333;}
    wallDist {method meshWave;}
}
fvSchemes_divSchemes_common
{
    default none;
    div(R)  Gauss linear;
    div((rho*R)) Gauss linear;
    div(nonlinearStress) Gauss linear;
    div((muEff*dev2(grad(U).T())))  Gauss linear;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    div((nu*dev2(T(grad(U))))) Gauss linear;
    div(((rho*(mu|rho))*dev2(T(grad(U))))) Gauss linear;
}

fvSchemes_gradSchemes
{
    grad(alpha1)         edgeCellsLeastSquares;
    
    default              Gauss linear;
    grad(nuTilda)   cellLimited Gauss linear 1;
    grad(k)         cellLimited Gauss linear 1;
    grad(kl)        cellLimited Gauss linear 1;
    grad(omega)     cellLimited Gauss linear 1;
    grad(epsilon)   cellLimited Gauss linear 1;
    grad(q)     cellLimited Gauss linear 1;
    grad(zeta)   cellLimited Gauss linear 1;
    grad(v2)        cellLimited Gauss linear 1;
    grad(f)         cellLimited Gauss linear 1;
}
