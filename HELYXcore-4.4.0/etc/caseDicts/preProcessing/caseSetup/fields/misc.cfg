displacement
{
    vRef uniform (0 0 0);
    allowedFieldInitialisationMethods (fixedValue);
    initialisation{type fixedValue; value $vRef;}
    solver smoothSolver;

    fieldDefinition
    {
        type vector;
        meshType point;
        dimensions [ 0 1 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type fixedValue; value $vRef;}
            mappedWall {type fixedValue; value $vRef;}
            outlet {type fixedValue; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type fixedValue; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

motion
{
    $displacement

    fieldDefinition
    {
        dimensions [ 0 1 -1 0 0 0 0 ];
    }
}

distance
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue);
    initialisation{type fixedValue; value $vRef;}

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 1 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type fixedValue; value $vRef;}
            outlet {type fixedValue; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type fixedValue; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

rhoCalculated
{
    vRef uniform 1;
    allowedFieldInitialisationMethods (default fixedValue cellSet equationOfState);
    initialisation{type equationOfState; priority 12;}

    fieldDefinition
    {
        type scalar;
        dimensions [ 1 -3 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall{type calculated; value $vRef;}
            mappedWall{ type calculated; value $vRef;}
            outlet{ type calculated; value $vRef;}
            inlet{ type calculated; value $vRef;}
            patch{ type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

