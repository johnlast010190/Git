theta
{
    allowedFieldInitialisationMethods (default fixedValue cellSet);
    initialisation {type fixedValue; value uniform 0;}
    solver smoothSolver;

    fieldDefinition
    {
        type scalar;
        dimensions [0 2 -2 0 0 0 0];
        internalField uniform 0.0;

        boundaryTypeDefaults
        {
            wall{type fixedValue; value uniform 1e-07;}
            mappedWall {type fixedValue; value uniform 1e-07;}
            outlet {type inletOutlet; phi phi1; inletValue uniform 1e-07; value uniform 1e-07;}
            inlet {type fixedValue; value uniform 1e-07;}
            patch {type fixedValue; value uniform 1e-07;}
            inactive {type fixedValueZone; value uniform 1e-07;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
}

rho
{
    vRef 1.2;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation {type default;}
    solver PCGDIC;

    fieldDefinition
    {
        type scalar;
        dimensions [ 1 -3 0 0 0 0 0 ];
        internalField uniform $vRef;

        boundaryTypeDefaults
        {
            wall {type calculated; value uniform $vRef;}
            mappedWall {type calculated; value uniform $vRef;}
            outlet {type calculated; value uniform $vRef;}
            inlet {type calculated; value uniform $vRef;}
            patch {type calculated; value uniform $vRef;}
            indirectWall {$wall}
            invisible {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

phase
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet volumeHeight);
    initialisation {type fixedValue; value $vRef;}
    solver PCGGAMG;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type zeroGradient;}
            mappedWall {type zeroGradient;}
            outlet {type inletOutlet; inletValue $vRef; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type inletOutlet; inletValue $vRef; value $vRef;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

phaseMarine
{
    $phase

    alphaRef uniform 0;

    fieldDefinition
    {
        boundaryTypeDefaults
        {
            wall {type interfaceCompression; value $alphaRef;}
            mappedWall {$wall}
            indirectWall {$wall}
        }
    }
    #remove alphaRef;
}

phaseEuler
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation {type fixedValue; value $vRef;}
    solver PCGGAMG;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type zeroGradient;}
            mappedWall {type zeroGradient;}
            patch {type inletOutlet; inletValue $vRef; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type inletOutlet; inletValue $vRef; value $vRef;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

//*** what is the point of this alphas field? Why not just use phase field?
alphas
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation {type fixedValue; value $vRef;}
    solver PCGGAMG;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type zeroGradient;}
            mappedWall {type zeroGradient;}
            outlet {type inletOutlet; inletValue $vRef; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type inletOutlet; inletValue $vRef; value $vRef;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

humidity
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue relativeHumidity cellSet);
    initialisation{type relativeHumidity; relativeHumidity 0.5; T T; Pabs 1e5;}
    solver smoothSolver;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall{type zeroGradient;}
            mappedWall{type zeroGradient;}
            outlet {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rhoEff;}
            inlet {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rhoEff;}
            patch {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rhoEff;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

humidityCmp
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue relativeHumidity cellSet);
    initialisation{type relativeHumidity; relativeHumidity 0.5; T T; Pabs 1e5;}
    solver smoothSolver;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall{type zeroGradient;}
            mappedWall{type zeroGradient;}
            outlet {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rho;}
            inlet {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rho;}
            patch {type relativeHumidityInletOutlet; relativeHumidity uniform 0.5; value $vRef; rho rho;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

species
{
    vRef uniform 0;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation {type fixedValue; value $vRef; priority 8;}
    solver PCGGAMG;

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 0 0 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type zeroGradient;}
            mappedWall {type zeroGradient;}
            outlet {type inletOutlet; inletValue $vRef; value $vRef;}
            inlet {type fixedValue; value $vRef;}
            patch {type inletOutlet; inletValue $vRef; value $vRef;}
            inactive {type fixedValueZone; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

speciesRegionCoupled
{
    $species

    fieldDefinition
    {
        boundaryTypeDefaults
        {
            mappedWall
            {
                type regionCoupledFlux;
                value uniform 0;
            }
        }
    }
}
