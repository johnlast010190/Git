baseDif
{
    allowedFieldInitialisationMethods (default fixedValue boundaryValue Prandtl turbulentIL cellSet);

    initialisation{type turbulentIL; I 0.05; L 0.01; Uref 1;}

    fieldDefinition
    {
        type scalar;
    }
}

nut
{
    $baseDif
    vRef uniform 0.001;

    fieldDefinition
    {
        dimensions [ 0 2 -1 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type nutUSpaldingWallFunction; value $vRef;}
            mappedWall {type nutUSpaldingWallFunction; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

nutKnop
{
    $nut

    fieldDefinition
    {
        vRef uniform 0.001;
        boundaryTypeDefaults
        {
            wall {type nutUKnopKOmegaWallFunction; value $vRef;}
            mappedWall {type nutUKnopKOmegaWallFunction; value $vRef;}
        }
        #remove vRef;
    }
}

nutTabulated
{
    $nut

    fieldDefinition
    {
        vRef uniform 0.001;
        boundaryTypeDefaults
        {
            wall {type nutUTabulatedWallFunction; value $vRef;}
            mappedWall {type nutUTabulatedWallFunction; value $vRef;}
        }
        #remove vRef;
    }
}

nutLowRe
{
    $nut
    vRef uniform 1e-20;

    fieldDefinition
    {
        boundaryTypeDefaults
        {
            wall {type nutLowReWallFunction; value $vRef;}
            mappedWall {type nutLowReWallFunction; value $vRef;}
            indirectWall {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
mut
{
    $baseDif
    vRef uniform 0.001;

    fieldDefinition
    {
        dimensions [ 1 -1 -1 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type mutkWallFunction; value $vRef;}
            mappedWall {type mutkWallFunction; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
mutUSpalding
{
    $mut
    vRef uniform 0.001;

    fieldDefinition
    {
        boundaryTypeDefaults
        {
            wall {type mutUSpaldingWallFunction; value $vRef;}
            mappedWall {type mutUSpaldingWallFunction; value $vRef;}
            indirectWall {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
mutLowRe
{
    $mut
    initialisation{type default;}
    vRef uniform 0.001;

    fieldDefinition
    {
        boundaryTypeDefaults
        {
            wall {type mutLowReWallFunction; value $vRef;}
            mappedWall {type mutLowReWallFunction; value $vRef;}
            processor {type processor; value $vRef;}
            indirectWall {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

D
{
    vRef uniform 0.001;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation{type fixedValue; value $vRef;}

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 2 -1 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type incompressible::DtKaderWallFunction; value $vRef;}
            mappedWall {type incompressible::DtKaderWallFunction; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
Dcompressible
{
    $D
    vRef uniform 0.001;

    fieldDefinition
    {
        dimensions [1 -1 -1 0 0 0 0 ];
        boundaryTypeDefaults
        {
            wall {type DtWallFunction; value uniform 0.001;}
            mappedWall {type DtWallFunction; value uniform 0.001;}
            indirectWall {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

alphat
{
    vRef uniform 0.001;
    allowedFieldInitialisationMethods (default fixedValue boundaryValue cellSet);
    initialisation{type default; value $vRef;}

    fieldDefinition
    {
        type scalar;
        dimensions [ 0 2 -1 0 0 0 0 ];
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type incompressible::alphatKaderWallFunction; value $vRef;}
            mappedWall {type incompressible::alphatKaderWallFunction; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
alphatCompressible
{
    $alphat
    vRef uniform 0.001;

    fieldDefinition
    {
        dimensions [ 1 -1 -1 0 0 0 0 ];
        boundaryTypeDefaults
        {
            wall {type alphatKaderWallFunction; value $vRef;}
            mappedWall {type alphatKaderWallFunction; value $vRef;}
            indirectWall {$wall}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
alphatLaminar
{
    $alphat
    allowedFieldInitialisationMethods (default fixedValue);
    vRef uniform 0.0;

    fieldDefinition
    {
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type fixedValue; value $vRef;}
            mappedWall {type fixedValue; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}
compAlphatLaminar
{
    $alphatCompressible
    allowedFieldInitialisationMethods (default fixedValue);
    vRef uniform 0.0;

    fieldDefinition
    {
        internalField $vRef;

        boundaryTypeDefaults
        {
            wall {type fixedValue; value $vRef;}
            mappedWall {type fixedValue; value $vRef;}
            outlet {type calculated; value $vRef;}
            inlet {type calculated; value $vRef;}
            patch {type calculated; value $vRef;}
            indirectWall {$wall}
            invisible {type zeroGradient;}
            inactive {type calculated; value $vRef;}
        }
        boundaryConditions
        {
        }
    }
    #remove vRef;
}

#remove baseDif;
