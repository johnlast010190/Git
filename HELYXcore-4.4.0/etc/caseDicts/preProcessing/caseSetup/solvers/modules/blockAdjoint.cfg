blockAdjoint
{
    materialProperties{}
    constant
    {
        turbulenceProperties
        {
            simulationType  RAS;
        }
    }

    system
    {
        fvSolution
        {
            relaxationFactors
            {
                equations
                {
                    pa 1;
                    Ua 0.99;
                }
            }
            blockSolver
            {
                pRefCell 0;
                pRefValue 0;
            }
            solvers
            {
                Upa{#include "../../settings/matrixSolvers/helyxBlockAMG.cfg"}
            }
        }
        fvSchemes
        {
            ddtSchemes
            {
                default         steadyState;
            }
            gradSchemes
            {
                default         Gauss linear;
                grad(Uatc)      faceLimited Gauss linear 1;
            }
            divSchemes
            {
                default         Gauss linear;;
                div(-phiMean,Ua)     Gauss upwind;
                div(-phi,Ua)     Gauss upwind;
                div((nuEff*dev2(T(grad(Ua))))) Gauss linear;
            }
            fluxRequired
            {
                pa;
            }
            laplacianSchemes
            {
                default         Gauss linear limited 0.333;
            }
            snGradSchemes
            {
                default         limited 0.333;
            }
            wallDist
            {
                method          meshWave;
            }
            interpolationSchemes
            {
                default         linear;
            }
        }
        controlDict
        {
            functions
            {
                vr1a
                {
                    functionObjectLibs ( "libreport.so" );
                    logToFile       yes;
                    fields          ( Ua pa);
                    region          region0;
                    type            volumeReport;
                }
            }
        }
    }

    fieldMaps
    {
        Ua U;
        pa pkinematic;
    }
    fields
    {
        Ua
        {
            initialisation
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }

            fieldDefinition
            {
                type vector;
                dimensions [0 0 0 0 0 0 0];
                internalField uniform (0 0 0);
                boundaryTypeDefaults
                {
                    wall{type fixedValue; uniform (0 0 0);}
                    mappedWall {type fixedValue; uniform (0 0 0);}
                    outlet {type fixedValue; uniform (0 0 0);}
                    inlet {type fixedValue; uniform (0 0 0);}
                    patch {type fixedValue; uniform (0 0 0);}
                    symmetryPlane {type symmetryVelocity; patchType symmetryPlane;}
                    symmetry {type symmetryVelocity; patchType symmetry;}
                }
            }
        }
        pa
        {
            initialisation
            {
                type            fixedValue;
                value           uniform 0;
            }

            fieldDefinition
            {
                type scalar;
                dimensions [0 1 -1 0 0 0 0];
                internalField uniform 0;
                boundaryTypeDefaults
                {
                    wall       {type zeroGradient;}
                    mappedWall {type zeroGradient;}
                    outlet     {type zeroGradient;}
                    inlet      {type zeroGradient;}
                    patch      {type zeroGradient;}
                    symmetryPlane {type zeroGradient; patchType symmetryPlane;}
                    symmetry {type zeroGradient; patchType symmetry;}
                }
            }
        }
    }
    boundaryTypeDefaults
    {
        inlet
        {
            pa
            {
                type            fixedValue;
                value           uniform 0;
            }
            Ua
            {
                type            zeroGradient;
            }
        }
        outlet
        {
            Ua
            {
                type            fixedValue;
                value           uniform ( 0 0 0 );
            }
        }
    }
}
