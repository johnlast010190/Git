dynamic
{
    fieldMaps
    {
        pointMotionU motion;
        pointDisplacement displacement;
    }

    system
    {
        fvSchemes
        {
            divSchemes
            {
                div(meshPhi,p)  Gauss linear;
            }
            laplacianSchemes
            {
                laplacian(diffusivity,cellDisplacement) Gauss linear uncorrected;
                laplacian(diffusivity,cellMotionU) Gauss linear uncorrected;
            }
            fluxRequired
            {
                pcorr           ;
            }
        }
        fvSolution
        {
            solvers
            {
                pcorr
                {
                    solver          GAMG;
                    agglomerator    faceAreaPair;
                    mergeLevels     1;
                    cacheAgglomeration true;
                    nCellsInCoarsestLevel 200;
                    tolerance       1e-10;
                    relTol          0.01;
                    smoother        DICGaussSeidel;
                    nPreSweeps      0;
                    nPostSweeps     2;
                    nFinestSweeps   2;
                    minIter         1;
                }
                pcorrFinal
                {
                    $pcorr
                }
                cellMotionU
                {
                    solver          PCG;
                    preconditioner  DIC;
                    tolerance       1e-08;
                    relTol          0;
                    minIter         1;
                }
                cellDisplacement
                {
                    solver          GAMG;
                    tolerance       1e-08;
                    relTol          0;
                    smoother        GaussSeidel;
                    cacheAgglomeration true;
                    nCellsInCoarsestLevel 10;
                    agglomerator    faceAreaPair;
                    mergeLevels     1;
                    minIter         1;
                }

            }

            PIMPLE
            {
                correctPhi      true;
                correctMeshPhi  false;
                turbOnFinalIterOnly false;
                //ddtPhiCorr      true;
            }
        }

        controlDict
        {
        }
    }

    requirements
    {
        AND ();
        OR
        (
            simpleFoam

            pimpleFoamRAS
            pimpleFoamLES

            rhoPimpleFoamRAS
            rhoPimpleFoamLES
            rhoPimpleFoamRAS2
            rhoPimpleFoamLES2

            helyxAeroRAS
            helyxAeroLES

            helyxCoupled
            tHelyxCoupledRAS
            tHelyxCoupledLES

            buoyantBousinesqPimpleFoamRAS
            buoyantBousinesqPimpleFoamLES

            buoyantPimpleFoamRAS
            buoyantPimpleFoamLES

            interFoamRAS
            interFoamRAS2
            interFoamRAS3
            interFoamLES
            interFoamLES2
            interFoamLES3

            interPhaseChangeFoamRAS
            interPhaseChangeFoamLES

            skaMarineRAS
            skaMarineLES

            rhoCentralFoamRAS
            rhoCentralFoamLES

            hydroRAS

            pressureCoupledS
            pressureCoupledTRAS
            pressureCoupledTLES

            segregatedS
            segregatedTRAS
            segregatedTLES
            segregatedVOFTRAS
            segregatedVOFTLES

            marineVOFTRAS
            marineVOFTLES

            acousticsT
            acousticsTRAS
            acousticsTLES

            solidT

            densityCoupledTRAS
            densityCoupledTLES

            elementsRAS
            elementsLES
            elementsLES2024
            elementsPressureCoupledRAS
            elementsPressureCoupledLES
        );
        conditional
        {
            trans
            {
                system
                {
                    fvSolution
                    {
                    }
                    controlDict
                    {
                    }
                }
                constant
                {
                }
            }
            "pimpleFoam.*" {$trans}

            multiphase
            {
                fieldMaps
                {
                }
            }
            "interFoam.*" {$multiphase}

            "skaMarine.*" {$multiphase}

            helyxAero
            {
                system
                {
                    fvSolution
                    {
                        PIMPLE
                        {
                            correctPhi      false;
                        }
                    }
                }
            }
            "helyxAero.*" {$helyxAero}
            elementsRAS {$helyxAero}
            elementsLES {$helyxAero}
            elementsLES2024 {$helyxAero}
            helyxVOF
            {
                system
                {
                    fvSchemes
                    {
                        gradSchemes
                        {
                            grad(alpha) leastSquares;
                        }
                    }
                }
            }
            meshDictChanges
            {
                system
                {
                    fvOptions
                    {
                        fvMeshSolver
                        {
                            type fvMeshSolver;
                            // Default to update dynamic mesh only once per timestep
                            solveInterval 0;
                            solveInitial true;
                        }
                    }
                    fvSchemes
                    {
                        ddtSchemes
                        {
                            default smartBounded Euler;
                        }
                    }
                }
            }
            "pressureCoupled.*" {$meshDictChanges}
            "segregated.*" {$meshDictChanges}
            segregatedVOFTRAS {$helyxVOF; $meshDictChanges}
            segregatedVOFTLES {$helyxVOF; $meshDictChanges}
            marineVOFTRAS {$meshDictChanges}
            marineVOFTLES {$meshDictChanges}
        }
        NOT ();
    }
}
