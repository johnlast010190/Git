#[[---------------------------------------------------------------------------]
|       o        |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise
|   o   O   o    |  Version : 4.4.0
|    o     o     |  ENGYS Ltd. <http://engys.com/>
|       o        |
[-----------------------------------------------------------------------------]
License
    This file is part of HELYXcore.
    HELYXcore is based on OpenFOAM (R) <http://www.openfoam.org/>.

    HELYXcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HELYXcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HELYXcore.  If not, see <http://www.gnu.org/licenses/>.

Copyright
    (c) 2020-2024 Engys Ltd.

Description
    This file configures the build, but also encodes several advanced user
    settings.  These settings are set as cache variables, but are not forced.
    It is therefore possible to set these variables in the userSettings.cmake
    file (or equivalent) without them being overwritten by values in this file.

[----------------------------------------------------------------------------]]

message(TITLE "Build configuration")

# ============================================================================ #
# --------------------------- Build configuration ---------------------------- #
# ============================================================================ #

# Integer version for the HELYX_API
set(HELYX_API_INTEGER_VERSION "40400")

# Internal variables specifying useful directories
set(HELYX_SRC ${HELYX_PROJECT_DIR}/src)
set(HELYX_MODULES ${HELYX_PROJECT_DIR}/modules)
set(HELYX_APPLICATIONS ${HELYX_PROJECT_DIR}/applications)
set(HELYX_SOLVERS ${HELYX_APPLICATIONS}/solvers)
set(HELYX_UTILITIES ${HELYX_APPLICATIONS}/utilities)

# For IDEs HELYX_BUILD_TYPE var to the build type selected, if recognised
if (DEFINED CMAKE_BUILD_TYPE AND NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Opt")
        set(HELYX_BUILD_TYPE "Opt")
    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(HELYX_BUILD_TYPE "Debug")
    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Prof")
        set(HELYX_BUILD_TYPE "Prof")
    endif ()
else ()
    # Set configuration in case we're not using an IDE that sets it
    set(CMAKE_BUILD_TYPE ${HELYX_BUILD_TYPE})
endif ()


# Correct for issues on specific platforms
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if(NOT ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 5.0.0)
        # For very old GCCs, -fuse-lf=bfd isn't implemented
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fuse-ld=bfd")
    elseif ("${CMAKE_CXX_COMPILER_VERSION}" MATCHES "4\.9\.1.*")
        add_definitions(-D__STDC_LIMIT_MACROS)
    endif ()
endif ()

add_definitions(
    -D${HELYX_BUILD_PLATFORM}
    -DHELYX_ARCH_OPTION=${HELYX_COMPILER_LIB_ARCH}
    -DHELYX_${HELYX_PRECISION_OPTION}
    -DHELYX_LABEL_SIZE=${HELYX_LABEL_SIZE}
    -DNoRepository
    -DHELYX_API=${HELYX_API_INTEGER_VERSION}
)
# References to old environment variables may not have been entirely removed, so
# as a fail-safe the old variables will be set here
add_definitions(
    -DWM_ARCH_OPTION=${HELYX_COMPILER_LIB_ARCH}
    -DWM_${HELYX_PRECISION_OPTION}
    -DWM_LABEL_SIZE=${HELYX_LABEL_SIZE}
)

# Defaults to true for SHARED/MODULE targets, false otherwise.  Defaults might
# be good enough?
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED on)

# More permissive warning level used for compiling certain files, e.g. those generated by Flex
# May no longer be used
set(LESSWARN
    "-Wno-old-style-cast -Wno-unused-local-typedefs -Wno-array-bounds -Wno-deprecated-declarations -Wno-unused-function -fpermissive"
    )

# Select only the optional flags that are recognised by the compiler
# Suppress diagnostic messages
set(prev_quiet ${CMAKE_REQUIRED_QUIET})
set(CMAKE_REQUIRED_QUIET TRUE)
include(CheckCXXCompilerFlag)
string(REPLACE " " ";" flags_list "${CMAKE_CXX_OPTIONAL_FLAGS}")
foreach(flag ${flags_list})
    check_cxx_compiler_flag(${flag} supports${flag})
    if(supports${flag})
        set(supported_flags "${supported_flags} ${flag}")
    else()
        set(unsupported_flags "${unsupported_flags} ${flag}")
    endif()
endforeach()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}${supported_flags}")
set(CMAKE_REQUIRED_QUIET ${prev_quiet})


# Check for ccache and use it if found
if(NOT "${CCACHE_REQUIRED}" MATCHES "^OFF$")
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
        set(CMAKE_C_COMPILER_LAUNCHER ccache)
        set(ccache_message "Using ccache")
    else()
        set(ccache_message "Not using ccache (not found)")
        if ("${CCACHE_REQUIRED}" MATCHES "^ON$")
            message(FATAL_ERROR "CCACHE_REQUIRED is set to ON/AUTO, but ccache was not found")
        endif()
    endif()
else()
    set(ccache_message "Not using ccache (disabled by setting CCACHE_REQUIRED to OFF)")
endif()

# Runtime debug flags.
if (HELYX_RUNTIME_DEBUG_FLAGS)
    add_compile_definitions(RUNTIME_DEBUG_FLAGS) # Tell the C++ preprocessor.
    add_compile_options(-ftrapping-math) # The runtime debug code enables and intercepts FP traps.
endif()

# Check for CMake unity compatibilitiy
if(${CMAKE_UNITY_BUILD})
    # VERSION_GREATER_EQUAL only available from CMake version 3.7
    if (NOT "${CMAKE_VERSION}" VERSION_LESS "3.16")
        # Unity builds work by generating "fake" translation units that `#include` a batch of real translation
        # units, effectively compiling several files as one big one. This can make builds faster.
        # CMAKE_EXPORT_COMPILE_COMMANDS is intended to emit a machine-readable list of build commands describing
        # how each individual translation unit in the project is to be compiled. This is used by tools such as
        # IDEs to learn things about how each source file will be compiled.
        # When you combine these flags, the commands exported by `CMAKE_EXPORT_COMPILE_COMMANDS` are the commands
        # for building those generated unity translation units, which is mostly useless.
        if(${CMAKE_EXPORT_COMPILE_COMMANDS})
            message(WARNING "CMAKE_EXPORT_COMPILE_COMMANDS and CMAKE_UNITY_BUILD both set.
        This effectively renders `CMAKE_EXPORT_COMPILE_COMMANDS` useless, since it will export build commands for
        the synthesised unity translation units instead of the real ones. This may break your IDE, or other tools.
        ")
        endif()
    else()
        message(WARNING "CMAKE_UNITY_BUILD set to \"${CMAKE_UNITY_BUILD}\", but CMake version \"${CMAKE_VERSION}\" is in use.  Unity builds are only available in CMake > 3.16.")
    endif()
endif()

# Restrict exporting of unnecessary symbols on Windows to avoid exceeding
# 65k limit for DLLs
if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--version-script=${HELYX_PROJECT_DIR}/etc/cmake/dllExportExclusions.map"
        CACHE STRING
        "Flags used by the shared libraries linker for all builds."
        FORCE
    )
endif()

# Save a teeny-tiny bit of binary size pls.
optional_linker_flag(--gc-sections)

# The Gold linker has a unique feature for detecting some kinds of ODR
# violation (eg. when you copy-paste-change a function without renaming
# it, causing the one that is used at runtime to become unspecified due
# to weak symbol resolution). It has a high false-negative rate, but can
# occasionally save you from silliness.
optional_linker_flag(--detect-odr-violations)

# Strip symbol tables in release builds, where supported.
# This saves lots of binary size, but makes debugging harder.
if ("${CMAKE_BUILD_TYPE}" STREQUAL "Opt")
    optional_linker_flag(--strip-all)
endif()

# If the settings file asks for LTO, do it if possible.
if (CMAKE_INTERPROCEDURAL_OPTIMIZATION)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT CAN_DO_LTO LANGUAGES C CXX)

    # At present Clang LTO breaks FOAM. This is probably FOAM's fault, but
    # until we fix it we can only run LTO with GCC.
    # The user settings file can decide if they want LTO on or off. Then, we
    # force it off if the compiler can't do it, or we aren't doing a release
    # build.
    if (NOT ${CAN_DO_LTO})
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
        message(STATUS "LTO: OFF (Unsupported by toolchain)")
    elseif ("${CMAKE_CXX_COMPILER}" MATCHES mingw)
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
        message(STATUS "LTO: OFF (Unsupported by Windows cross-compilation toolchain)")
    elseif (NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
        message(STATUS "LTO: OFF (Clang LTO currently breaks FOAM)")
    elseif ("${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS "9")
        # GCC 7.5 LTO crashes on HELYX and GCC 8.5 LTO produces a large slowdown in the link phase.
        # We could revisit this in the future if we care enough, or just upgrade compilers.
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
        message(STATUS "LTO: OFF (GCC 8.x and older are not suitable for LTO in HELYX)")
    else()
        message(STATUS "LTO: ON")
    endif()
else()
    message(STATUS "LTO: OFF")
endif()

# These flags improve optimisation, but since they are interprocedural
# optimisations, they make compilation much slower if LTO is not enabled.
if (CMAKE_INTERPROCEDURAL_OPTIMIZATION)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        # Old versions of cmake fail to pass -flto=auto, causing very slow builds.
        # So, gratuitous hacks time:
        optional_compiler_flag(-flto=auto)
        optional_linker_flag(-flto=auto)

        # GCC has a quite silly feature where, in LTO mode, it outputs *both* IR and machine code in
        # object files, allowing them to be used in both LTO and non-LTO links. This is simply a
        # waste of time if you're performing an LTO linkage.
        optional_compiler_flag(-fno-fat-lto-objects)

        # Interprocedural pointer analysis.
        optional_compiler_flag(-fipa-pta)

        # Aggressive devirtualisation.
        optional_compiler_flag(-fdevirtualize-at-ltrans)

        # Interesting but doesn't seem to make things faster at present.
        # optional_compiler_flag(-fdevirtualize-speculatively)

        # Global CSE.
        optional_compiler_flag(-fgcse-sm)
        optional_compiler_flag(-fgcse-las)
    endif()
endif()

# Warning tuning
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    # Enable clang's much fancier warnings output. Colour ASCII-art diagrams
    # of template mismatches, and the name of the flag you need to disable the
    # corresponding warning.
    optional_compiler_flag(-fdiagnostics-show-template-tree)
    optional_compiler_flag(-fdiagnostics-show-option)
    optional_compiler_flag(-fdiagnostics-show-category=name)

    optional_compiler_flag(-Wno-unknown-warning-option)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # Don't complain about pragmas that disable warnings that aren't in this
    # compiler.
    optional_compiler_flag(-Wno-pragmas)
endif()

# ============================================================================ #
# -------------------------------- Messaging --------------------------------- #
# ============================================================================ #

string(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_TYPE_UPPER)

message(STATUS "Compiler: ${CMAKE_CXX_COMPILER} version ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "C++ flags: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${BUILD_TYPE_UPPER}}")
message(STATUS "Optional C++ flags that are unsupported and will be ignored: ${unsupported_flags}")
# message(CLEAN "Linker: ${LINKER_REALPATH}")  # See above
message(STATUS "Linker: ${linker_message}")
message(STATUS
    "Linker flags for executables: ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_${BUILD_TYPE_UPPER}}"
)
message(STATUS
    "Linker flags for libraries:   ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_${BUILD_TYPE_UPPER}}"
)
message(STATUS "${ccache_message}")
message(STATUS "Target system: ${CMAKE_SYSTEM}")

if(${CMAKE_UNITY_BUILD})
    if (NOT "${CMAKE_VERSION}" VERSION_LESS "3.16")
        message(STATUS "Unity build:  ON")
        message(STATUS "Unity build batch size:  ${CMAKE_UNITY_BUILD_BATCH_SIZE}")
    endif()
endif()

message(CLEAN
"[==============================================================================]

")
